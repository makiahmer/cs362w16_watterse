        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:
        -:    9:
        -:   10:// test to ensure isGameOver works
        -:   11:
        2:   12:int main (int argc, char** argv) {
        -:   13:  struct gameState G;
        2:   14:  struct gameState *p = &G;
        -:   15:
        -:   16:  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        2:   17:	       sea_hag, tribute, smithy};
        -:   18:
        2:   19:  printf ("Starting game.\n");
        -:   20:  
        -:   21:  
        -:   22:  // set up game
        2:   23:  initializeGame(2, k, 5, p);
        -:   24:  
        2:   25:  int money = 0;
        2:   26:  int i=0;
        2:   27:  int check = 0;
        -:   28:
        -:   29:
        -:   30:do{
       70:   31:    money = 0;
        -:   32:	
      420:   33:    for (i = 0; i < numHandCards(p); i++) {
      350:   34:      if (handCard(i, p) == copper)
      122:   35:    money++;
      228:   36:      else if (handCard(i, p) == silver)
       86:   37:    money += 2;
      142:   38:      else if (handCard(i, p) == gold)
       30:   39:    money += 3;
        -:   40:
        -:   41:    }
        -:   42:	// player 0 buys card 
       70:   43:    if (whoseTurn(p) == 0) {
        -:   44:		
        2:   45:      if (money >= 8) {
    #####:   46:        printf("0: bought province\n"); 
    #####:   47:        buyCard(province, p);
        -:   48:      }
        2:   49:      else if (money >= 6) {
    #####:   50:        printf("0: bought gold\n"); 
    #####:   51:        buyCard(gold, p);
        -:   52:      }
        -:   53:	  
        2:   54:	  else if (money >= 5) {
    #####:   55:        printf("0: bought duchy\n"); 
    #####:   56:        buyCard(duchy, p);
        -:   57:      }
        2:   58:      else if (money >= 3) {
        2:   59:        printf("0: bought silver\n"); 
        2:   60:        buyCard(silver, p);
        -:   61:      }
        -:   62:
        2:   63:      printf("0: end turn\n");
        2:   64:      endTurn(p);
        -:   65:    }
        -:   66:	// player 1 buys card 
        -:   67:    else {
        -:   68:
       68:   69:      if (money >= 8) {
       16:   70:        printf("0: bought province\n"); 
       16:   71:        buyCard(province, p);
        -:   72:      }
       52:   73:      else if (money >= 6) {
       16:   74:        printf("0: bought gold\n"); 
       16:   75:        buyCard(gold, p);
        -:   76:      }
        -:   77:	  
       36:   78:	  else if (money >= 5) {
       10:   79:        printf("0: bought duchy\n"); 
       10:   80:        buyCard(duchy, p);
        -:   81:      }
       26:   82:      else if (money >= 3) {
       24:   83:        printf("0: bought silver\n"); 
       24:   84:        buyCard(silver, p);
        -:   85:      }
        -:   86:
       68:   87:      printf("0: end turn\n");
       68:   88:      endTurn(p);
        -:   89:      
       68:   90:      endTurn(p);      
        -:   91:    }
        -:   92:
       70:   93:      printf ("Player 0: %d\nPlayer 1: %d\n", scoreFor(0, p), scoreFor(1, p));
        -:   94:	
       70:   95:	check = isGameOver(p);
       70:   96:	assert (check == 0 || check == 1);
       70:   97:  }  while (!check);
        -:   98:
        2:   99:  printf ("Finished game.\n");
        2:  100:  printf ("Player 0: %d\nPlayer 1: %d\n", scoreFor(0, p), scoreFor(1, p));
        2:  101:  printf ("Unit test 1 for isGameOver, result check: %d\n", check);
        2:  102:  if (check == 1){
        2:  103:	  printf ("game over complete\n");
        -:  104:  }
        -:  105:
        2:  106:  return 0;
        -:  107:}