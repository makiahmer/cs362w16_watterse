        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:3
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:
        -:    9:
        3:   10:int main(){
        -:   11:	struct gameState g;
        -:   12:	int i, ret;
        3:   13:	g.deckCount[0] = 5;
        3:   14:	g.handCount[0] = 5;
        3:   15:	g.discardCount[0] = 5;
        -:   16:	
        -:   17:	int c[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        3:   18:	       sea_hag, tribute, smithy};
        -:   19:	
        -:   20:
        -:   21:	// put only smith in the deck
       18:   22:	for (i = 0; i < g.deckCount[0]; i++){
       15:   23:		g.deck[0][i] = c[9];
        -:   24:	}
        -:   25:	
        -:   26:	//put card in direct relation to c[] indexes
       18:   27:	for ( i = 0; i < g.handCount[0]; i++){
       15:   28:		g.hand[0][i] = c[i];
        -:   29:	}
        -:   30:	
       18:   31:	for ( i = 0; i < g.discardCount[0]; i++){
       15:   32:		g.discard[0][i] = c[i];
        -:   33:	}
        -:   34:	
        -:   35:	
        3:   36:	ret = fullDeckCount(0,smithy, &g);
        3:   37:	printf (" ret is %d \n",ret);
        3:   38:	assert(ret == 5);
        3:   39:	printf (" fullDeck Count works \n");
        3:   40:	return 0;
        -:   41:}