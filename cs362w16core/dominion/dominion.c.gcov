        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    57764:    8:int compare(const void* a, const void* b) {
    57764:    9:  if (*(int*)a > *(int*)b)
    27240:   10:    return 1;
    30524:   11:  if (*(int*)a < *(int*)b)
    10244:   12:    return -1;
    20280:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
       20:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       20:   44:  SelectStream(1);
       20:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       20:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       20:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      220:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
     2200:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
     2000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       20:   73:  if (numPlayers == 2)
        -:   74:    {
        8:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       12:   77:  else if (numPlayers == 3)
        -:   78:    {
        8:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
        4:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       20:   87:  if (numPlayers == 2)
        -:   88:    {
        8:   89:      state->supplyCount[estate] = 8;
        8:   90:      state->supplyCount[duchy] = 8;
        8:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       12:   95:      state->supplyCount[estate] = 12;
       12:   96:      state->supplyCount[duchy] = 12;
       12:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       20:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       20:  102:  state->supplyCount[silver] = 40;
       20:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      420:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
     3300:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
     3100:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      214:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
       14:  115:		  if (numPlayers == 2){ 
        8:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
        6:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      186:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      200:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2900:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       76:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
       56:  140:      state->deckCount[i] = 0;
      224:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
      168:  143:	  state->deck[i][j] = estate;
      168:  144:	  state->deckCount[i]++;
        -:  145:	}
      448:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
      392:  148:	  state->deck[i][j] = copper;
      392:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       76:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
       56:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       76:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       56:  166:      state->handCount[i] = 0;
       56:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      560:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
      540:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       20:  182:  state->outpostPlayed = 0;
       20:  183:  state->phase = 0;
       20:  184:  state->numActions = 1;
       20:  185:  state->numBuys = 1;
       20:  186:  state->playedCardCount = 0;
       20:  187:  state->whoseTurn = 0;
       20:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      120:  192:  for (it = 0; it < 5; it++){
      100:  193:    drawCard(state->whoseTurn, state);
        -:  194:  }
        -:  195:
       20:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
       20:  198:  return 0;
        -:  199:}
        -:  200:
      832:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      832:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      832:  209:  if (state->deckCount[player] < 1)
    #####:  210:    return -1;
      832:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    19142:  214:  while (state->deckCount[player] > 0) {
    17478:  215:    card = floor(Random() * state->deckCount[player]);
    17478:  216:    newDeck[newDeckPos] = state->deck[player][card];
    17478:  217:    newDeckPos++;
   126096:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
   108618:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    17478:  221:    state->deckCount[player]--;
        -:  222:  }
    18310:  223:  for (i = 0; i < newDeckPos; i++) {
    17478:  224:    state->deck[player][i] = newDeck[i];
    17478:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      832:  228:  return 0;
        -:  229:}
        -:  230:
    25144:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    25144:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    25144:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    25144:  243:  if ( state->numActions < 1 )
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    25144:  249:  card = handCard(handPos, state);
        -:  250:	
        -:  251:  //check if selected card is an action
    25144:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    25052:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       92:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
        8:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       84:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       84:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:	
       84:  269:  return 0;
        -:  270:}
        -:  271:
     6856:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
     6856:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
     6856:  280:  who = state->whoseTurn;
        -:  281:
     6856:  282:  if (state->numBuys < 1){
    #####:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
     6856:  286:  } else if (supplyCount(supplyPos, state) <1){
      422:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
      422:  289:    return -1;
     6434:  290:  } else if (state->coins < getCost(supplyPos)){
     4736:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
     4736:  293:    return -1;
        -:  294:  } else {
     1698:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
     1698:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:  
     1698:  299:    state->coins = (state->coins) - (getCost(supplyPos));
     1698:  300:    state->numBuys--;
     1698:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
     1698:  308:  return 0;
        -:  309:}
        -:  310:
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
    25146:  315:int handCard(int handPos, struct gameState *state) {
    25146:  316:  int currentPlayer = whoseTurn(state);
    25146:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
     8596:  320:int supplyCount(int card, struct gameState *state) {
     8596:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
       76:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
       76:  326:  int count = 0;
        -:  327:
     1200:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
     1124:  330:      if (state->deck[player][i] == card) count++;
        -:  331:    }
        -:  332:
      196:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
      120:  335:      if (state->hand[player][i] == card) count++;
        -:  336:    }
        -:  337:
     1536:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
     1460:  340:      if (state->discard[player][i] == card) count++;
        -:  341:    }
        -:  342:
       76:  343:  return count;
        -:  344:}
        -:  345:
   195302:  346:int whoseTurn(struct gameState *state) {
   195302:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
     3250:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
     3250:  353:  int currentPlayer = whoseTurn(state);
        -:  354:  
        -:  355:  //Discard hand
    19482:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    16232:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    16232:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
     3250:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
     3250:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
     2010:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
     1240:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
     3250:  370:  state->outpostPlayed = 0;
     3250:  371:  state->phase = 0;
     3250:  372:  state->numActions = 1;
     3250:  373:  state->coins = 0;
     3250:  374:  state->numBuys = 1;
     3250:  375:  state->playedCardCount = 0;
     3250:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    19500:  380:  for (k = 0; k < 5; k++){
    16250:  381:    drawCard(state->whoseTurn, state);//Draw a card
        -:  382:  }
        -:  383:
        -:  384:  //Update money
     3250:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
     3250:  387:  return 0;
        -:  388:}
        -:  389:
     3272:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
     3272:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
     3272:  401:  j = 0;
    85072:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
    81800:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
     2630:  406:	  j++;
        -:  407:	}
        -:  408:    }
     3272:  409:  if ( j >= 3)
        -:  410:    {
       20:  411:      return 1;
        -:  412:    }
        -:  413:
     3252:  414:  return 0;
        -:  415:}
        -:  416:
      112:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
      112:  420:  int score = 0;
        -:  421:  //score from hand
      312:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
      200:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
      200:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
      200:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
      200:  427:      if (state->hand[player][i] == province) { score = score + 6; };
      200:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
      200:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
     2196:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
     2084:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
     2084:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
     2084:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
     2084:  438:      if (state->discard[player][i] == province) { score = score + 6; };
     2084:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
     2084:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
     2196:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
     2084:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
     2084:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
     2084:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
     2084:  449:      if (state->deck[player][i] == province) { score = score + 6; };
     2084:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
     2084:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  452:    }
        -:  453:
      112:  454:  return score;
        -:  455:}
        -:  456:
       20:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
      100:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
       80:  467:      if (i >= state->numPlayers)
        -:  468:	{
       24:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
       56:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
       20:  478:  j = 0;
      100:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
       80:  481:      if (players[i] > players[j])
        -:  482:	{
       18:  483:	  j = i;
        -:  484:	}
        -:  485:    }
       20:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
       20:  489:  currentPlayer = whoseTurn(state);
      100:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
       80:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
        8:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
       20:  499:  j = 0;
      100:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
       80:  502:      if ( players[i] > players[j] )
        -:  503:	{
       18:  504:	  j = i;
        -:  505:	}
        -:  506:    }
       20:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
      100:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
       80:  512:      if ( players[i] == highScore )
        -:  513:	{
       20:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
       60:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
       20:  522:  return 0;
        -:  523:}
        -:  524:
    16394:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    16394:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    17694:  533:    for (i = 0; i < state->discardCount[player];i++){
    16918:  534:      state->deck[player][i] = state->discard[player][i];
    16918:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      776:  538:    state->deckCount[player] = state->discardCount[player];
      776:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      776:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:   
      776:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      776:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      776:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
      776:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      776:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      776:  559:    if (deckCounter == 0)
    #####:  560:      return -1;
        -:  561:
      776:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      776:  563:    state->deckCount[player]--;
      776:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    15618:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
    15618:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    15618:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    15618:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    15618:  576:    state->deckCount[player]--;
    15618:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    16394:  580:  return 0;
        -:  581:}
        -:  582:
     8138:  583:int getCost(int cardNumber)
        -:  584:{
     8138:  585:  switch( cardNumber ) 
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
      448:  590:      return 2;
        -:  591:    case duchy:
      442:  592:      return 5;
        -:  593:    case province:
      440:  594:      return 8;
        -:  595:    case copper:
      886:  596:      return 0;
        -:  597:    case silver:
      596:  598:      return 3;
        -:  599:    case gold:
      468:  600:      return 6;
        -:  601:    case adventurer:
      196:  602:      return 6;
        -:  603:    case council_room:
      268:  604:      return 5;
        -:  605:    case feast:
      236:  606:      return 4;
        -:  607:    case gardens:
      204:  608:      return 4;
        -:  609:    case mine:
      214:  610:      return 5;
        -:  611:    case remodel:
      168:  612:      return 4;
        -:  613:    case smithy:
      282:  614:      return 4;
        -:  615:    case village:
      276:  616:      return 3;
        -:  617:    case baron:
      378:  618:      return 4;
        -:  619:    case great_hall:
      144:  620:      return 3;
        -:  621:    case minion:
      268:  622:      return 5;
        -:  623:    case steward:
      266:  624:      return 3;
        -:  625:    case tribute:
      178:  626:      return 5;
        -:  627:    case ambassador:
      256:  628:      return 3;
        -:  629:    case cutpurse:
      196:  630:      return 4;
        -:  631:    case embargo: 
      336:  632:      return 2;
        -:  633:    case outpost:
      264:  634:      return 5;
        -:  635:    case salvager:
      286:  636:      return 4;
        -:  637:    case sea_hag:
      202:  638:      return 4;
        -:  639:    case treasure_map:
      240:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:
        6:  647:int great_hall_func(int currentPlayer, struct gameState *state, int handPos){
        -:  648:	//+1 Card
        6:  649:    drawCard(currentPlayer, state);
        -:  650:			
        -:  651:    //+1 Actions
        6:  652:    state->numActions++;
        -:  653:			
        -:  654:    //discard card from hand
        6:  655:    discardCard(handPos, currentPlayer, state, 0);
        6:  656:    return 0;
        -:  657:}
        -:  658:
       10:  659:int embargo_func(int currentPlayer, int choice1, struct gameState *state, int handPos){
        -:  660:      //+2 Coins
       10:  661:      state->coins = state->coins + 2;
        -:  662:			
        -:  663:      //see if selected pile is in play
       10:  664:      if ( state->supplyCount[choice1] == -1 )
        -:  665:	{
    #####:  666:	  return -1;
        -:  667:	}
        -:  668:			
        -:  669:      //add embargo token to selected supply pile
       10:  670:      state->embargoTokens[choice1]++;
        -:  671:			
        -:  672:      //trash card
       10:  673:      discardCard(handPos, currentPlayer, state, 1);		
       10:  674:      return 0;		
        -:  675:}
        -:  676:
        2:  677:int salvager_func(int currentPlayer, int choice1, struct gameState *state, int handPos){
        -:  678:	//+1 buy
        2:  679:	state->numBuys++;
        -:  680:			
        2:  681:	if (choice1){
        -:  682:	//gain coins equal to trashed card
        2:  683:	state->coins = state->coins + getCost( handCard(choice1, state) );
        -:  684:	//trash card
        2:  685:	discardCard(choice1, currentPlayer, state, 1);	
        -:  686:	}
        -:  687:			
        -:  688:    //discard card
        2:  689:    discardCard(handPos, currentPlayer, state, 0);
        2:  690:    return 0;
        -:  691:}		
        -:  692:
       10:  693:int sea_hag_func(int currentPlayer, struct gameState *state, int handPos){
        -:  694:		int i;
       30:  695:		for (i = 0; i < state->numPlayers; i++){
       20:  696:			if (i != currentPlayer){
       10:  697:			state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
       10:  698:			state->deckCount[i]--;
       10:  699:			state->discardCount[i]++;
       10:  700:			state->deck[i][state->deckCount[i]++] = curse;//Top card now a curse
        -:  701:			}
        -:  702:		}
       10:  703:		return 0;
        -:  704:}
        -:  705:
        2:  706:int treasure_map_func(int currentPlayer, struct gameState *state, int handPos){
        -:  707:		
        -:  708:		//search hand for another treasure_map
        2:  709:		int index = -1;
        -:  710:		int i;
       12:  711:		for (i = 0; i < state->handCount[currentPlayer]; i++){
       10:  712:			if (state->hand[currentPlayer][i] == treasure_map && i != handPos){
    #####:  713:				index = i;
    #####:  714:				break;
        -:  715:			}
        -:  716:		}
        2:  717:		if (index > -1){
        -:  718:			//trash both treasure cards
    #####:  719:			discardCard(handPos, currentPlayer, state, 1);
    #####:  720:			discardCard(index, currentPlayer, state, 1);
    #####:  721:			state->discardCount[i]++;
        -:  722:			//gain 4 Gold cards
    #####:  723:			for (i = 0; i < 4; i++){
    #####:  724:				gainCard(gold, state, 1, currentPlayer);
        -:  725:			}
        -:  726:				
        -:  727:			//return success
    #####:  728:			return 1;
        -:  729:		}
        -:  730:			
        -:  731:		//no second treasure_map found in hand
        2:  732:		return -1;
        -:  733:}
        -:  734:		
       92:  735:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  736:{
        -:  737:  int i;
        -:  738:  int j;
        -:  739:  int k;
        -:  740:  int x;
       92:  741:  int currentPlayer = whoseTurn(state);
       92:  742:  int nextPlayer = currentPlayer + 1;
        -:  743:
       92:  744:  int tributeRevealedCards[2] = {-1, -1};
        -:  745:  int temphand[MAX_HAND];// moved above the if statement
       92:  746:  int drawntreasure=0;
        -:  747:  int cardDrawn;
       92:  748:  int z = 0;// this is the counter for the temp hand
       92:  749:  if (nextPlayer > (state->numPlayers - 1)){
       34:  750:    nextPlayer = 0;
        -:  751:  }
        -:  752:  
        -:  753:	
        -:  754:  //uses switch to select card and perform actions
       92:  755:  switch( card ) 
        -:  756:    {
        -:  757:    case adventurer:
    #####:  758:      while(drawntreasure<2){
    #####:  759:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  760:	  shuffle(currentPlayer, state);
        -:  761:	}
    #####:  762:	drawCard(currentPlayer, state);
    #####:  763:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####:  764:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####:  765:	  drawntreasure++;
        -:  766:	else{
    #####:  767:	  temphand[z]=cardDrawn;
    #####:  768:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  769:	  z++;
        -:  770:	}
        -:  771:      }
    #####:  772:      while(z-1>=0){
    #####:  773:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  774:	z=z-1;
        -:  775:      }
    #####:  776:      return 0;
        -:  777:			
        -:  778:    case council_room:
        -:  779:      //+4 Cards
    #####:  780:      for (i = 0; i < 4; i++)
        -:  781:	{
    #####:  782:	  drawCard(currentPlayer, state);
        -:  783:	}
        -:  784:			
        -:  785:      //+1 Buy
    #####:  786:      state->numBuys++;
        -:  787:			
        -:  788:      //Each other player draws a card
    #####:  789:      for (i = 0; i < state->numPlayers; i++)
        -:  790:	{
    #####:  791:	  if ( i != currentPlayer )
        -:  792:	    {
    #####:  793:	      drawCard(i, state);
        -:  794:	    }
        -:  795:	}
        -:  796:			
        -:  797:      //put played card in played card pile
    #####:  798:      discardCard(handPos, currentPlayer, state, 0);
        -:  799:			
    #####:  800:      return 0;
        -:  801:			
        -:  802:    case feast:
        -:  803:      //gain card with cost up to 5
        -:  804:      //Backup hand
    #####:  805:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  806:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  807:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  808:      }
        -:  809:      //Backup hand
        -:  810:
        -:  811:      //Update Coins for Buy
    #####:  812:      updateCoins(currentPlayer, state, 5);
    #####:  813:      x = 1;//Condition to loop on
    #####:  814:      while( x == 1) {//Buy one card
    #####:  815:	if (supplyCount(choice1, state) <= 0){
    #####:  816:	  if (DEBUG)
        -:  817:	    printf("None of that card left, sorry!\n");
        -:  818:
    #####:  819:	  if (DEBUG){
        -:  820:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  821:	  }
        -:  822:	}
    #####:  823:	else if (state->coins < getCost(choice1)){
    #####:  824:	  printf("That card is too expensive!\n");
        -:  825:
    #####:  826:	  if (DEBUG){
        -:  827:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  828:	  }
        -:  829:	}
        -:  830:	else{
        -:  831:
    #####:  832:	  if (DEBUG){
        -:  833:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  834:	  }
        -:  835:
    #####:  836:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  837:	  x = 0;//No more buying cards
        -:  838:
    #####:  839:	  if (DEBUG){
        -:  840:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  841:	  }
        -:  842:
        -:  843:	}
        -:  844:      }     
        -:  845:
        -:  846:      //Reset Hand
    #####:  847:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  848:	state->hand[currentPlayer][i] = temphand[i];
    #####:  849:	temphand[i] = -1;
        -:  850:      }
        -:  851:      //Reset Hand
        -:  852:      			
    #####:  853:      return 0;
        -:  854:			
        -:  855:    case gardens:
    #####:  856:      return -1;
        -:  857:			
        -:  858:    case mine:
    #####:  859:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  860:
    #####:  861:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  862:	{
    #####:  863:	  return -1;
        -:  864:	}
        -:  865:		
    #####:  866:      if (choice2 > treasure_map || choice2 < curse)
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:
    #####:  871:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      gainCard(choice2, state, 2, currentPlayer);
        -:  877:
        -:  878:      //discard card from hand
    #####:  879:      discardCard(handPos, currentPlayer, state, 0);
        -:  880:
        -:  881:      //discard trashed card
    #####:  882:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  883:	{
    #####:  884:	  if (state->hand[currentPlayer][i] == j)
        -:  885:	    {
    #####:  886:	      discardCard(i, currentPlayer, state, 0);			
    #####:  887:	      break;
        -:  888:	    }
        -:  889:	}
        -:  890:			
    #####:  891:      return 0;
        -:  892:			
        -:  893:    case remodel:
        2:  894:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  895:
        2:  896:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  897:	{
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
        2:  901:      gainCard(choice2, state, 0, currentPlayer);
        -:  902:
        -:  903:      //discard card from hand
        2:  904:      discardCard(handPos, currentPlayer, state, 0);
        -:  905:
        -:  906:      //discard trashed card
        2:  907:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  908:	{
        2:  909:	  if (state->hand[currentPlayer][i] == j)
        -:  910:	    {
        2:  911:	      discardCard(i, currentPlayer, state, 0);			
        2:  912:	      break;
        -:  913:	    }
        -:  914:	}
        -:  915:
        -:  916:
        2:  917:      return 0;
        -:  918:		
        -:  919:    case smithy:
        -:  920:		
        -:  921:      //+3 Cards
       24:  922:      for (i = 0; i < 3; i++)
        -:  923:	{
       18:  924:	  drawCard(currentPlayer, state);
        -:  925:	}
        -:  926:			
        -:  927:      //discard card from hand
        6:  928:      discardCard(handPos, currentPlayer, state, 0);
        6:  929:      return 0;
        -:  930:		
        -:  931:    case village:
        -:  932:      //+1 Card
        4:  933:      drawCard(currentPlayer, state);
        -:  934:			
        -:  935:      //+2 Actions
        4:  936:      state->numActions = state->numActions + 2;
        -:  937:			
        -:  938:      //discard played card from hand
        4:  939:      discardCard(handPos, currentPlayer, state, 0);
        4:  940:      return 0;
        -:  941:		
        -:  942:    case baron:
       14:  943:      state->numBuys++;//Increase buys by 1!
       14:  944:      if (choice1 > 0){//Boolean true or going to discard an estate
       10:  945:	int p = 0;//Iterator for hand!
       10:  946:	int card_not_discarded = 1;//Flag for discard set!
       90:  947:	while(card_not_discarded){
       70:  948:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  949:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  950:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  951:	    state->discardCount[currentPlayer]++;
    #####:  952:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  953:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  954:	    }
    #####:  955:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  956:	    state->handCount[currentPlayer]--;
    #####:  957:	    card_not_discarded = 0;//Exit the loop
        -:  958:	  }
       70:  959:	  else if (p > state->handCount[currentPlayer]){
       10:  960:	    if(DEBUG) {
        -:  961:	      printf("No estate cards in your hand, invalid choice\n");
        -:  962:	      printf("Must gain an estate if there are any\n");
        -:  963:	    }
       10:  964:	    if (supplyCount(estate, state) > 0){
        4:  965:	      gainCard(estate, state, 0, currentPlayer);
        4:  966:	      state->supplyCount[estate]--;//Decrement estates
        4:  967:	      if (supplyCount(estate, state) == 0){
        2:  968:		isGameOver(state);
        -:  969:	      }
        -:  970:	    }
       10:  971:	    card_not_discarded = 0;//Exit the loop
        -:  972:	  }
        -:  973:			    
        -:  974:	  else{
       60:  975:	    p++;//Next card
        -:  976:	  }
        -:  977:	}
        -:  978:      }
        -:  979:			    
        -:  980:      else{
        4:  981:	if (supplyCount(estate, state) > 0){
        2:  982:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
        2:  983:	  state->supplyCount[estate]--;//Decrement Estates
        2:  984:	  if (supplyCount(estate, state) == 0){
    #####:  985:	    isGameOver(state);
        -:  986:	  }
        -:  987:	}
        -:  988:      }
        -:  989:	    
        -:  990:      
       14:  991:      return 0;
        -:  992:		
        -:  993:    case great_hall:      
        6:  994:		return great_hall_func(currentPlayer, state, handPos);
        -:  995:		
        -:  996:    case minion:
        -:  997:      //+1 action
    #####:  998:      state->numActions++;
        -:  999:			
        -: 1000:      //discard card from hand
    #####: 1001:      discardCard(handPos, currentPlayer, state, 0);
        -: 1002:			
    #####: 1003:      if (choice1)		//+2 coins
        -: 1004:	{
    #####: 1005:	  state->coins = state->coins + 2;
        -: 1006:	}
        -: 1007:			
    #####: 1008:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1009:	{
        -: 1010:	  //discard hand
    #####: 1011:	  while(numHandCards(state) > 0)
        -: 1012:	    {
    #####: 1013:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1014:	    }
        -: 1015:				
        -: 1016:	  //draw 4
    #####: 1017:	  for (i = 0; i < 4; i++)
        -: 1018:	    {
    #####: 1019:	      drawCard(currentPlayer, state);
        -: 1020:	    }
        -: 1021:				
        -: 1022:	  //other players discard hand and redraw if hand size > 4
    #####: 1023:	  for (i = 0; i < state->numPlayers; i++)
        -: 1024:	    {
    #####: 1025:	      if (i != currentPlayer)
        -: 1026:		{
    #####: 1027:		  if ( state->handCount[i] > 4 )
        -: 1028:		    {
        -: 1029:		      //discard hand
    #####: 1030:		      while( state->handCount[i] > 0 )
        -: 1031:			{
    #####: 1032:			  discardCard(handPos, i, state, 0);
        -: 1033:			}
        -: 1034:							
        -: 1035:		      //draw 4
    #####: 1036:		      for (j = 0; j < 4; j++)
        -: 1037:			{
    #####: 1038:			  drawCard(i, state);
        -: 1039:			}
        -: 1040:		    }
        -: 1041:		}
        -: 1042:	    }
        -: 1043:				
        -: 1044:	}
    #####: 1045:      return 0;
        -: 1046:		
        -: 1047:    case steward:
       10: 1048:      if (choice1 == 1)
        -: 1049:	{
        -: 1050:	  //+2 cards
        4: 1051:	  drawCard(currentPlayer, state);
        4: 1052:	  drawCard(currentPlayer, state);
        -: 1053:	}
        6: 1054:      else if (choice1 == 2)
        -: 1055:	{
        -: 1056:	  //+2 coins
        6: 1057:	  state->coins = state->coins + 2;
        -: 1058:	}
        -: 1059:      else
        -: 1060:	{
        -: 1061:	  //trash 2 cards in hand
    #####: 1062:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1063:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1064:	}
        -: 1065:			
        -: 1066:      //discard card from hand
       10: 1067:      discardCard(handPos, currentPlayer, state, 0);
       10: 1068:      return 0;
        -: 1069:		
        -: 1070:    case tribute:
        4: 1071:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1072:	if (state->deckCount[nextPlayer] > 0){
    #####: 1073:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1074:	  state->deckCount[nextPlayer]--;
        -: 1075:	}
    #####: 1076:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1077:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1078:	  state->discardCount[nextPlayer]--;
        -: 1079:	}
        -: 1080:	else{
        -: 1081:	  //No Card to Reveal
    #####: 1082:	  if (DEBUG){
        -: 1083:	    printf("No cards to reveal\n");
        -: 1084:	  }
        -: 1085:	}
        -: 1086:      }
        -: 1087:	    
        -: 1088:      else{
        4: 1089:	if (state->deckCount[nextPlayer] == 0){
    #####: 1090:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1091:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1092:	    state->deckCount[nextPlayer]++;
    #####: 1093:	    state->discard[nextPlayer][i] = -1;
    #####: 1094:	    state->discardCount[nextPlayer]--;
        -: 1095:	  }
        -: 1096:			    
    #####: 1097:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1098:	} 
        4: 1099:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        4: 1100:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        4: 1101:	state->deckCount[nextPlayer]--;
        4: 1102:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
        4: 1103:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
        4: 1104:	state->deckCount[nextPlayer]--;
        -: 1105:      }    
        -: 1106:		       
        4: 1107:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
        2: 1108:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        2: 1109:	state->playedCardCount++;
        2: 1110:	tributeRevealedCards[1] = -1;
        -: 1111:      }
        -: 1112:
       16: 1113:      for (i = 0; i <= 2; i ++){
       14: 1114:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
        2: 1115:	  state->coins += 2;
        -: 1116:	}
        -: 1117:		    
       14: 1118:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
        4: 1119:	  drawCard(currentPlayer, state);
        4: 1120:	  drawCard(currentPlayer, state);
        -: 1121:	}
        -: 1122:	else{//Action Card
        6: 1123:	  state->numActions = state->numActions + 2;
        -: 1124:	}
        -: 1125:      }
        -: 1126:	    
        4: 1127:      return 0;
        -: 1128:		
        -: 1129:    case ambassador:
       16: 1130:      j = 0;		//used to check if player has enough cards to discard
        -: 1131:
       16: 1132:      if (choice2 > 2 || choice2 < 0)
        -: 1133:	{
    #####: 1134:	  return -1;				
        -: 1135:	}
        -: 1136:
       16: 1137:      if (choice1 == handPos)
        -: 1138:	{
        2: 1139:	  return -1;
        -: 1140:	}
        -: 1141:
       84: 1142:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1143:	{
       70: 1144:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1145:	    {
        2: 1146:	      j++;
        -: 1147:	    }
        -: 1148:	}
       14: 1149:      if (j < choice2)
        -: 1150:	{
        4: 1151:	  return -1;				
        -: 1152:	}
        -: 1153:
       10: 1154:      if (DEBUG) 
        -: 1155:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1156:
        -: 1157:      //increase supply count for choosen card by amount being discarded
       10: 1158:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1159:			
        -: 1160:      //each other player gains a copy of revealed card
       34: 1161:      for (i = 0; i < state->numPlayers; i++)
        -: 1162:	{
       24: 1163:	  if (i != currentPlayer)
        -: 1164:	    {
       14: 1165:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1166:	    }
        -: 1167:	}
        -: 1168:
        -: 1169:      //discard played card from hand
       10: 1170:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1171:
        -: 1172:      //trash copies of cards returned to supply
       12: 1173:      for (j = 0; j < choice2; j++)
        -: 1174:	{
        2: 1175:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1176:	    {
        2: 1177:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1178:		{
        2: 1179:		  discardCard(i, currentPlayer, state, 1);
        2: 1180:		  break;
        -: 1181:		}
        -: 1182:	    }
        -: 1183:	}			
        -: 1184:
       10: 1185:      return 0;
        -: 1186:		
        -: 1187:    case cutpurse:
        -: 1188:
        2: 1189:      updateCoins(currentPlayer, state, 2);
        8: 1190:      for (i = 0; i < state->numPlayers; i++)
        -: 1191:	{
        6: 1192:	  if (i != currentPlayer)
        -: 1193:	    {
        4: 1194:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1195:		{
    #####: 1196:		  if (state->hand[i][j] == copper)
        -: 1197:		    {
    #####: 1198:		      discardCard(j, i, state, 0);
    #####: 1199:		      break;
        -: 1200:		    }
    #####: 1201:		  if (j == state->handCount[i])
        -: 1202:		    {
    #####: 1203:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1204:			{
    #####: 1205:			  if (DEBUG)
        -: 1206:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1207:			}	
    #####: 1208:		      break;
        -: 1209:		    }		
        -: 1210:		}
        -: 1211:					
        -: 1212:	    }
        -: 1213:				
        -: 1214:	}				
        -: 1215:
        -: 1216:      //discard played card from hand
        2: 1217:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1218:
        2: 1219:      return 0;
        -: 1220:
        -: 1221:		
        -: 1222:    case embargo:
       10: 1223:		return embargo_func(currentPlayer, choice1, state, handPos);
        -: 1224:		
        -: 1225:		
        -: 1226:    case outpost:
        -: 1227:      //set outpost flag
        4: 1228:      state->outpostPlayed++;
        -: 1229:			
        -: 1230:      //discard card
        4: 1231:      discardCard(handPos, currentPlayer, state, 0);
        4: 1232:      return 0;
        -: 1233:		
        -: 1234:		
        -: 1235:    case salvager:
        2: 1236:		return salvager_func(currentPlayer, choice1, state, handPos);
        -: 1237:		
        -: 1238:		
        -: 1239:    case sea_hag:
       10: 1240:		return sea_hag_func(currentPlayer, state, handPos);
        -: 1241:
        -: 1242:		
        -: 1243:    case treasure_map:
        2: 1244:		return treasure_map_func(currentPlayer, state, handPos);
        -: 1245:	
        -: 1246:	}
        -: 1247:	
    #####: 1248:	return -1;
        -: 1249:}
        -: 1250:
       62: 1251:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1252:{
        -: 1253:	
        -: 1254:  //if card is not trashed, added to Played pile 
       62: 1255:  if (trashFlag < 1)
        -: 1256:    {
        -: 1257:      //add card to played pile
       48: 1258:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       48: 1259:      state->playedCardCount++;
        -: 1260:    }
        -: 1261:	
        -: 1262:  //set played card to -1
       62: 1263:  state->hand[currentPlayer][handPos] = -1;
        -: 1264:	
        -: 1265:  //remove card from player's hand
       62: 1266:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1267:    {
        -: 1268:      //reduce number of cards in hand
       10: 1269:      state->handCount[currentPlayer]--;
        -: 1270:    }
       52: 1271:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
        -: 1276:  else 	
        -: 1277:    {
        -: 1278:      //replace discarded card with last card in hand
       52: 1279:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1280:      //set last card to -1
       52: 1281:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1282:      //reduce number of cards in hand
       52: 1283:      state->handCount[currentPlayer]--;
        -: 1284:    }
        -: 1285:	
       62: 1286:  return 0;
        -: 1287:}
        -: 1288:
     1720: 1289:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1290:{
        -: 1291:  //Note: supplyPos is enum of choosen card
        -: 1292:	
        -: 1293:  //check if supply pile is empty (0) or card is not used in game (-1)
     1720: 1294:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1295:    {
        2: 1296:      return -1;
        -: 1297:    }
        -: 1298:	
        -: 1299:  //added card for [whoseTurn] current player:
        -: 1300:  // toFlag = 0 : add to discard
        -: 1301:  // toFlag = 1 : add to deck
        -: 1302:  // toFlag = 2 : add to hand
        -: 1303:
     1718: 1304:  if (toFlag == 1)
        -: 1305:    {
    #####: 1306:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1307:      state->deckCount[player]++;
        -: 1308:    }
     1718: 1309:  else if (toFlag == 2)
        -: 1310:    {
    #####: 1311:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1312:      state->handCount[player]++;
        -: 1313:    }
        -: 1314:  else
        -: 1315:    {
     1718: 1316:      state->discard[player][ state->discardCount[player] ] = supplyPos;
     1718: 1317:      state->discardCount[player]++;
        -: 1318:    }
        -: 1319:	
        -: 1320:  //decrease number in supply pile
     1718: 1321:  state->supplyCount[supplyPos]--;
        -: 1322:	 
     1718: 1323:  return 0;
        -: 1324:}
        -: 1325:
     3356: 1326:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1327:{
        -: 1328:  int i;
        -: 1329:	
        -: 1330:  //reset coin count
     3356: 1331:  state->coins = 0;
        -: 1332:
        -: 1333:  //add coins for each Treasure card in player's hand
    20118: 1334:  for (i = 0; i < state->handCount[player]; i++)
        -: 1335:    {
    16762: 1336:      if (state->hand[player][i] == copper)
        -: 1337:	{
     7200: 1338:	  state->coins += 1;
        -: 1339:	}
     9562: 1340:      else if (state->hand[player][i] == silver)
        -: 1341:	{
      940: 1342:	  state->coins += 2;
        -: 1343:	}
     8622: 1344:      else if (state->hand[player][i] == gold)
        -: 1345:	{
    #####: 1346:	  state->coins += 3;
        -: 1347:	}	
        -: 1348:    }	
        -: 1349:
        -: 1350:  //add bonus
     3356: 1351:  state->coins += bonus;
        -: 1352:
     3356: 1353:  return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357://end of dominion.c
        -: 1358:
