Starting game.
0: bought silver
0: end turn
Player 0: 3
Player 1: 2
0: bought silver
0: end turn
Player 0: 5
Player 1: 4
0: bought silver
0: end turn
Player 0: 3
Player 1: 2
0: bought silver
0: end turn
Player 0: 6
Player 1: 3
0: bought gold
0: end turn
Player 0: 2
Player 1: 1
0: bought silver
0: end turn
Player 0: 5
Player 1: 4
0: bought province
0: end turn
Player 0: 3
Player 1: 1
0: bought duchy
0: end turn
Player 0: 5
Player 1: 12
0: bought silver
0: end turn
Player 0: 3
Player 1: 20
0: bought province
0: end turn
Player 0: 6
Player 1: 0
0: bought province
0: end turn
Player 0: 3
Player 1: 21
0: bought silver
0: end turn
Player 0: 5
Player 1: 33
0: bought gold
0: end turn
Player 0: 2
Player 1: 10
0: bought silver
0: end turn
Player 0: 4
Player 1: 16
0: bought duchy
0: end turn
Player 0: 2
Player 1: 34
0: bought silver
0: end turn
Player 0: 5
Player 1: 44
0: bought province
0: end turn
Player 0: 3
Player 1: 0
0: bought province
0: end turn
Player 0: 5
Player 1: 25
0: bought duchy
0: end turn
Player 0: 3
Player 1: 42
0: bought silver
0: end turn
Player 0: 4
Player 1: 56
0: bought gold
0: end turn
Player 0: 3
Player 1: 75
0: bought silver
0: end turn
Player 0: 4
Player 1: 3
0: bought province
0: end turn
Player 0: 3
Player 1: 36
0: bought silver
0: end turn
Player 0: 5
Player 1: 45
0: bought duchy
0: end turn
Player 0: 2
Player 1: 55
0: bought gold
0: end turn
Player 0: 6
Player 1: 69
0: bought gold
0: end turn
Player 0: 3
Player 1: 93
0: bought gold
0: end turn
Player 0: 5
Player 1: 0
0: bought province
0: end turn
Player 0: 3
Player 1: 22
0: bought silver
0: end turn
Player 0: 4
Player 1: 48
0: bought duchy
0: end turn
Player 0: 3
Player 1: 60
0: bought gold
0: end turn
Player 0: 5
Player 1: 75
0: bought gold
0: end turn
Player 0: 3
Player 1: 110
0: end turn
Player 0: 6
Player 1: 111
0: bought province
0: end turn
Player 0: 3
Player 1: 1
Finished game.
Player 0: 3
Player 1: 1
Unit test 1 for isGameOver, result check: 1
game over complete
what is in hand : 4 
what is in hand : 5 
what is in hand : 6 
I have 3 in hand 
total coin is : 11 
what is in hand : 4 
what is in hand : 5 
what is in hand : 6 
I have 3 in hand 
playCard Works ! 
 ret is 5 
 fullDeck Count works 
Starting game.
smithyfunc works 
Starting game.
handcount is 5 
numBuy is 1 
handcount is 8 
numBuy is 2 
councilfunc works 
Starting game.
handcount is 5 
coin is 4 
handcount is 4 
coin is 3 
g.embargoTokens[smithy] is : 1 
embargo switch statement works 
Starting game.
handcount is 5 
g.outpostPlayed is 0 
handcount is 4 
g.outpostPlayed is 0 
outpost switch statement works 
File 'unittest1.c'
Lines executed:89.29% of 56
unittest1.c:creating 'unittest1.c.gcov'

File 'unittest2.c'
Lines executed:100.00% of 14
unittest2.c:creating 'unittest2.c.gcov'

File 'unittest3.c'
Lines executed:100.00% of 25
unittest3.c:creating 'unittest3.c.gcov'

File 'unittest4.c'
Lines executed:100.00% of 16
unittest4.c:creating 'unittest4.c.gcov'

File 'cardtest1.c'
Lines executed:100.00% of 10
cardtest1.c:creating 'cardtest1.c.gcov'

File 'cardtest2.c'
Lines executed:100.00% of 16
cardtest2.c:creating 'cardtest2.c.gcov'

File 'cardtest3.c'
Lines executed:100.00% of 18
cardtest3.c:creating 'cardtest3.c.gcov'

File 'cardtest4.c'
Lines executed:100.00% of 14
cardtest4.c:creating 'cardtest4.c.gcov'

File 'dominion.c'
Lines executed:19.55% of 578
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
       30:    8:int compare(const void* a, const void* b) {
       30:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
       30:   11:  if (*(int*)a < *(int*)b)
        8:   12:  if (*(int*)a < *(int*)b)
        8:   13:    return -1;
       22:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
        1:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
        1:   45:  SelectStream(1);
        1:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
        1:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
    #####:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
        1:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
       11:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
      110:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
      100:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
        1:   74:  if (numPlayers == 2)
        -:   75:    {
        1:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
    #####:   78:  else if (numPlayers == 3)
        -:   79:    {
    #####:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
        1:   88:  if (numPlayers == 2)
        -:   89:    {
        1:   90:      state->supplyCount[estate] = 8;
        1:   91:      state->supplyCount[duchy] = 8;
        1:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
    #####:   96:      state->supplyCount[estate] = 12;
    #####:   97:      state->supplyCount[duchy] = 12;
    #####:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
        1:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:  103:  state->supplyCount[silver] = 40;
        1:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
       21:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
      165:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
      155:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
       11:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
        1:  116:		  if (numPlayers == 2){ 
        1:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
    #####:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
        9:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
       10:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
      145:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
        3:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
        2:  141:      state->deckCount[i] = 0;
        8:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
        6:  144:	  state->deck[i][j] = estate;
        6:  145:	  state->deckCount[i]++;
        -:  146:	}
       16:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
       14:  149:	  state->deck[i][j] = copper;
       14:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
        3:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
        2:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
        3:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
        2:  167:      state->handCount[i] = 0;
        2:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
       28:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
       27:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
        1:  183:  state->outpostPlayed = 0;
        1:  184:  state->phase = 0;
        1:  185:  state->numActions = 1;
        1:  186:  state->numBuys = 1;
        1:  187:  state->playedCardCount = 0;
        1:  188:  state->whoseTurn = 0;
        1:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
        6:  193:  for (it = 0; it < 5; it++){
        5:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
        1:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
        1:  199:  return 0;
        -:  200:}
        -:  201:
        2:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
        2:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
        2:  210:  if (state->deckCount[player] < 1)
    #####:  211:    return -1;
        2:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
       24:  215:  while (state->deckCount[player] > 0) {
       20:  216:    card = floor(Random() * state->deckCount[player]);
       20:  217:    newDeck[newDeckPos] = state->deck[player][card];
       20:  218:    newDeckPos++;
       62:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
       42:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
       20:  222:    state->deckCount[player]--;
        -:  223:  }
       22:  224:  for (i = 0; i < newDeckPos; i++) {
       20:  225:    state->deck[player][i] = newDeck[i];
       20:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
        2:  229:  return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:  
        -:  267://printf("state coin before update coins is % d \n", state->coins);
        -:  268://update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
    #####:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
    #####:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
    #####:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
    #####:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
    #####:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
        1:  348:int whoseTurn(struct gameState *state) {
        1:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
        5:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
        5:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
    #####:  535:    for (i = 0; i < state->discardCount[player];i++){
    #####:  536:      state->deck[player][i] = state->discard[player][i];
    #####:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
    #####:  540:    state->deckCount[player] = state->discardCount[player];
    #####:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
    #####:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
    #####:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
    #####:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
    #####:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
    #####:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
    #####:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
    #####:  561:    if (deckCounter == 0)
    #####:  562:      return -1;
        -:  563:
    #####:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  565:    state->deckCount[player]--;
    #####:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
        5:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
        5:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
        5:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
        5:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
        5:  578:    state->deckCount[player]--;
        5:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
        5:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:
        -:  649://*refactor function for council_room affect*
    #####:  650:int councilfunc(struct gameState* state, int handPos){
        -:  651:	//printf("inside council_room function \n\n\n\n\n\n");
    #####:  652:	int i = 0;
    #####:  653:	int currentPlayer = whoseTurn(state);
        -:  654:	
        -:  655:	     //+4 Cards
    #####:  656:      for (i = 0; i < 4; i++)
        -:  657:	{
    #####:  658:	  drawCard(currentPlayer, state);
        -:  659:	}
        -:  660:			
        -:  661:      //+1 Buy
    #####:  662:      state->numBuys++;
        -:  663:			
        -:  664:      //Each other player draws a card
    #####:  665:      for (i = 0; i < state->numPlayers; i++)
        -:  666:	{
    #####:  667:	  if ( i != currentPlayer )
        -:  668:	    {
    #####:  669:	      drawCard(i, state);
        -:  670:	    }
        -:  671:	}
        -:  672:			
        -:  673:      //put played card in played card pile
    #####:  674:      discardCard(handPos, currentPlayer, state, 0);
        -:  675:			
    #####:  676:      return 0;
        -:  677:	
        -:  678:	
        -:  679:}
        -:  680://*refactor function for smithy affect*
    #####:  681:int smithyfunc(struct gameState* state, int handPos){
        -:  682:	
        -:  683:	//printf("inside smithyfunc\n\n\n\n\n");
    #####:  684:	int i = 0;
    #####:  685:	int currentPlayer = whoseTurn(state);
        -:  686:	  //+3 Cards
    #####:  687:      for (i = 0; i < 5; i++)
        -:  688:	{
    #####:  689:	  drawCard(currentPlayer, state);
        -:  690:
        -:  691:	}
        -:  692:			
        -:  693:      //discard card from hand
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
    #####:  695:      return 0;
        -:  696:}
        -:  697:
        -:  698://*refactor function for adventurer affect*
    #####:  699:int adventurerfunc( struct gameState* state){
        -:  700:	//printf("inside adventurerfunc\n\n\n\n\n");
    #####:  701:	int currentPlayer = whoseTurn(state);
        -:  702:	int cardDrawn;
        -:  703:	int temphand[MAX_HAND];
    #####:  704:	int z = 0;
    #####:  705:	int drawntreasure = 0;
        -:  706:	
    #####:  707:	while(drawntreasure<2){
    #####:  708:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####:  709:	  shuffle(currentPlayer, state);
        -:  710:	}
    #####:  711:	drawCard(currentPlayer, state);
    #####:  712:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  713:	
    #####:  714:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
    #####:  715:		drawntreasure++;
    #####:  716:		drawntreasure+= 8;
        -:  717:	}
        -:  718:	
        -:  719:	else{
    #####:  720:	  temphand[z]=cardDrawn;
    #####:  721:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  722:	  z++;
        -:  723:	}
        -:  724:      }
    #####:  725:      while(z-1>=0){
    #####:  726:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  727:	z=z-1;
        -:  728:      }
        -:  729:	  
    #####:  730:	  printf("inside adventurer function\n\n\n\n\n");
    #####:  731:      return 0;
        -:  732:	
        -:  733:	
        -:  734:}
        -:  735:
        -:  736://*refactor function for village affect*
        -:  737:
    #####:  738:int villagefunc (struct gameState* state, int handPos){
        -:  739:	  //printf("inside villagefunc\n\n\n\n\n");
    #####:  740:	  int currentPlayer = whoseTurn(state);
        -:  741:	
        -:  742:	  //+1 Card
    #####:  743:      drawCard(currentPlayer, state);
        -:  744:			
        -:  745:      //+2 Actions
    #####:  746:      state->numActions = state->numActions + 2;
        -:  747:			
        -:  748:      //discard played card from hand
    #####:  749:      discardCard(handPos, currentPlayer, state, 0);
        -:  750:	  
    #####:  751:	  printf("Inside villagefunc \n\n\n\n\n");
    #####:  752:      return 0;	
        -:  753:	
        -:  754:}
        -:  755:
        -:  756://*refactor function for minion affect*
        -:  757:
    #####:  758:int minionfunc(int choice1, int choice2, struct gameState* state, int handPos){
        -:  759:	//printf("inside minionfunc\n\n\n\n\n");
        -:  760:	int i,j;
    #####:  761:	int currentPlayer = whoseTurn(state);
        -:  762:	
        -:  763:	  //+1 action
    #####:  764:      state->numActions++;
        -:  765:			
        -:  766:      //discard card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
        -:  768:			
    #####:  769:      if (choice1)		//+2 coins
        -:  770:	{
    #####:  771:	  state->coins = state->coins + 2;
        -:  772:	}
        -:  773:			
    #####:  774:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  775:	{
        -:  776:	  //discard hand
    #####:  777:	  while(numHandCards(state) > 0)
        -:  778:	    {
    #####:  779:	      discardCard(handPos, currentPlayer, state, 0);
        -:  780:	    }
        -:  781:				
        -:  782:	  //draw 4
    #####:  783:	  for (i = 0; i < 4; i++)
        -:  784:	    {
    #####:  785:	      drawCard(currentPlayer, state);
        -:  786:	    }
        -:  787:				
        -:  788:	  //other players discard hand and redraw if hand size > 4
    #####:  789:	  for (i = 0; i < state->numPlayers; i++)
        -:  790:	    {
    #####:  791:	      if (i != currentPlayer)
        -:  792:		{
    #####:  793:		  if ( state->handCount[i] > 4 )
        -:  794:		    {
        -:  795:		      //discard hand
    #####:  796:		      while( state->handCount[i] > 0 )
        -:  797:			{
    #####:  798:			  discardCard(handPos, i, state, 0);
        -:  799:			}
        -:  800:							
        -:  801:		      //draw 4
    #####:  802:		      for (j = 0; j < 4; j++)
        -:  803:			{
    #####:  804:			  drawCard(i, state);
        -:  805:			}
        -:  806:		    }
        -:  807:		}
        -:  808:	    }
        -:  809:				
        -:  810:	}
    #####:  811:	printf("inside minion function \n\n\n\n\n");
    #####:  812:      return 0;
        -:  813:}
        -:  814:
        -:  815:
        1:  816:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  817:{
        -:  818:  int i;
        -:  819:  int j;
        -:  820:  int k;
        -:  821:  int x;
        -:  822:  int index;
        1:  823:  int currentPlayer = whoseTurn(state);
        1:  824:  int nextPlayer = currentPlayer + 1;
        -:  825:
        1:  826:  int tributeRevealedCards[2] = {-1, -1};
        -:  827:  int temphand[MAX_HAND];// moved above the if statement
        -:  828:  //int drawntreasure=0;
        -:  829:  int cardDrawn;
        -:  830:  //int z = 0;// this is the counter for the temp hand
        1:  831:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  832:    nextPlayer = 0;
        -:  833:  }
        -:  834:  
        -:  835:	
        -:  836:  //uses switch to select card and perform actions
        1:  837:  switch( card ) 
        -:  838:    {
        -:  839:    case adventurer:
    #####:  840:		return adventurerfunc(state);
        -:  841:      // while(drawntreasure<2){
        -:  842:	// if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  843:	  // shuffle(currentPlayer, state);
        -:  844:	// }
        -:  845:	// drawCard(currentPlayer, state);
        -:  846:	// cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  847:	// if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  848:	  // drawntreasure++;
        -:  849:	// else{
        -:  850:	  // temphand[z]=cardDrawn;
        -:  851:	  // state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  852:	  // z++;
        -:  853:	// }
        -:  854:      // }
        -:  855:      // while(z-1>=0){
        -:  856:	// state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  857:	// z=z-1;
        -:  858:      // }
        -:  859:      // return 0;
        -:  860:			
        -:  861:    case council_room:
    #####:  862:		return councilfunc(state, handPos);
        -:  863:			
        -:  864:    case feast:
        -:  865:      //gain card with cost up to 5
        -:  866:      //Backup hand
        -:  867:	  
    #####:  868:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  869:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  870:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  871:      }
        -:  872:	  
        -:  873:      //Backup hand
        -:  874:
        -:  875:      //Update Coins for Buy
        -:  876:	  
    #####:  877:      updateCoins(currentPlayer, state, 5);
    #####:  878:      x = 1;//Condition to loop on
    #####:  879:      while( x == 1) {//Buy one card
    #####:  880:	if (supplyCount(choice1, state) <= 0){
    #####:  881:	  if (DEBUG)
        -:  882:	    printf("None of that card left, sorry!\n");
        -:  883:
    #####:  884:	  if (DEBUG){
        -:  885:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  886:	  }
        -:  887:	}
    #####:  888:	else if (state->coins < getCost(choice1)){
    #####:  889:	  printf("That card is too expensive!\n");
        -:  890:
    #####:  891:	  if (DEBUG){
        -:  892:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  893:	  }
        -:  894:	}
        -:  895:	else{
        -:  896:
    #####:  897:	  if (DEBUG){
        -:  898:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  899:	  }
        -:  900:
    #####:  901:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  902:	  x = 0;//No more buying cards
        -:  903:
    #####:  904:	  if (DEBUG){
        -:  905:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  906:	  }
        -:  907:
        -:  908:	}
        -:  909:      }     
        -:  910:      //Reset Hand
        -:  911:	  
    #####:  912:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  913:	state->hand[currentPlayer][i] = temphand[i];
    #####:  914:	temphand[i] = -1;
        -:  915:      }
        -:  916:	  
        -:  917:      //Reset Hand
        -:  918:      			
    #####:  919:      return 0;
        -:  920:			
        -:  921:    case gardens:
    #####:  922:      return -1;
        -:  923:			
        -:  924:    case mine:
    #####:  925:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  926:
    #####:  927:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  928:	{
    #####:  929:	  return -1;
        -:  930:	}
        -:  931:		
    #####:  932:      if (choice2 > treasure_map || choice2 < curse)
        -:  933:	{
    #####:  934:	  return -1;
        -:  935:	}
        -:  936:
    #####:  937:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  938:	{
    #####:  939:	  return -1;
        -:  940:	}
        -:  941:
    #####:  942:      gainCard(choice2, state, 2, currentPlayer);
        -:  943:
        -:  944:      //discard card from hand
    #####:  945:      discardCard(handPos, currentPlayer, state, 0);
        -:  946:
        -:  947:      //discard trashed card
    #####:  948:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  949:	{
    #####:  950:	  if (state->hand[currentPlayer][i] == j)
        -:  951:	    {
    #####:  952:	      discardCard(i, currentPlayer, state, 0);			
    #####:  953:	      break;
        -:  954:	    }
        -:  955:	}
        -:  956:			
    #####:  957:      return 0;
        -:  958:			
        -:  959:    case remodel:
    #####:  960:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  961:
    #####:  962:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  963:	{
    #####:  964:	  return -1;
        -:  965:	}
        -:  966:
    #####:  967:      gainCard(choice2, state, 0, currentPlayer);
        -:  968:
        -:  969:      //discard card from hand
    #####:  970:      discardCard(handPos, currentPlayer, state, 0);
        -:  971:
        -:  972:      //discard trashed card
    #####:  973:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  974:	{
    #####:  975:	  if (state->hand[currentPlayer][i] == j)
        -:  976:	    {
    #####:  977:	      discardCard(i, currentPlayer, state, 0);			
    #####:  978:	      break;
        -:  979:	    }
        -:  980:	}
        -:  981:
        -:  982:
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case smithy:
    #####:  986:		return smithyfunc(state, handPos);
        -:  987:      //+3 Cards
        -:  988:	  
        -:  989:     // for (i = 0; i < 3; i++)
        -:  990:	//{
        -:  991:	 // drawCard(currentPlayer, state);
        -:  992:	//}
        -:  993:			
        -:  994:      //discard card from hand
        -:  995:	  
        -:  996:      //discardCard(handPos, currentPlayer, state, 0);
        -:  997:      //return 0;
        -:  998:		
        -:  999:    case village:
    #####: 1000:		return villagefunc(state, handPos);
        -: 1001:
        -: 1002:		
        -: 1003:    case baron:
    #####: 1004:      state->numBuys++;//Increase buys by 1!
    #####: 1005:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1006:	int p = 0;//Iterator for hand!
    #####: 1007:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1008:	while(card_not_discarded){
    #####: 1009:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1010:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1011:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1012:	    state->discardCount[currentPlayer]++;
    #####: 1013:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1014:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1015:	    }
    #####: 1016:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1017:	    state->handCount[currentPlayer]--;
    #####: 1018:	    card_not_discarded = 0;//Exit the loop
        -: 1019:	  }
    #####: 1020:	  else if (p > state->handCount[currentPlayer]){
    #####: 1021:	    if(DEBUG) {
        -: 1022:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1023:	      printf("Must gain an estate if there are any\n");
        -: 1024:	    }
    #####: 1025:	    if (supplyCount(estate, state) > 0){
    #####: 1026:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1027:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1028:	      if (supplyCount(estate, state) == 0){
    #####: 1029:		isGameOver(state);
        -: 1030:	      }
        -: 1031:	    }
    #####: 1032:	    card_not_discarded = 0;//Exit the loop
        -: 1033:	  }
        -: 1034:			    
        -: 1035:	  else{
    #####: 1036:	    p++;//Next card
        -: 1037:	  }
        -: 1038:	}
        -: 1039:      }
        -: 1040:			    
        -: 1041:      else{
    #####: 1042:	if (supplyCount(estate, state) > 0){
    #####: 1043:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1044:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1045:	  if (supplyCount(estate, state) == 0){
    #####: 1046:	    isGameOver(state);
        -: 1047:	  }
        -: 1048:	}
        -: 1049:      }
        -: 1050:	    
        -: 1051:      
    #####: 1052:      return 0;
        -: 1053:		
        -: 1054:    case great_hall:
        -: 1055:      //+1 Card
    #####: 1056:      drawCard(currentPlayer, state);
        -: 1057:			
        -: 1058:      //+1 Actions
    #####: 1059:      state->numActions++;
        -: 1060:			
        -: 1061:      //discard card from hand
    #####: 1062:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1063:      return 0;
        -: 1064:		
        -: 1065:    case minion:
        -: 1066:	
    #####: 1067:		return minionfunc(choice1,choice2, state,handPos);
        -: 1068:      //+1 action
        -: 1069:
        -: 1070:			
        -: 1071:      //discard card from hand
        -: 1072:      // discardCard(handPos, currentPlayer, state, 0);
        -: 1073:			
        -: 1074:      // if (choice1)		//+2 coins
        -: 1075:	// {
        -: 1076:	  // state->coins = state->coins + 2;
        -: 1077:	// }
        -: 1078:			
        -: 1079:      // else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1080:	// {
        -: 1081:	  //discard hand
        -: 1082:	  // while(numHandCards(state) > 0)
        -: 1083:	    // {
        -: 1084:	      // discardCard(handPos, currentPlayer, state, 0);
        -: 1085:	    // }
        -: 1086:				
        -: 1087:	  //draw 4
        -: 1088:	  // for (i = 0; i < 4; i++)
        -: 1089:	    // {
        -: 1090:	      // drawCard(currentPlayer, state);
        -: 1091:	    // }
        -: 1092:				
        -: 1093:	  //other players discard hand and redraw if hand size > 4
        -: 1094:	  // for (i = 0; i < state->numPlayers; i++)
        -: 1095:	    // {
        -: 1096:	      // if (i != currentPlayer)
        -: 1097:		// {
        -: 1098:		  // if ( state->handCount[i] > 4 )
        -: 1099:		    // {
        -: 1100:		      //discard hand
        -: 1101:		      // while( state->handCount[i] > 0 )
        -: 1102:			// {
        -: 1103:			  // discardCard(handPos, i, state, 0);
        -: 1104:			// }
        -: 1105:							
        -: 1106:		      //draw 4
        -: 1107:		      // for (j = 0; j < 4; j++)
        -: 1108:			// {
        -: 1109:			  // drawCard(i, state);
        -: 1110:			// }
        -: 1111:		    // }
        -: 1112:		// }
        -: 1113:	    // }
        -: 1114:				
        -: 1115:	// }
        -: 1116:      // return 0;
        -: 1117:		
        -: 1118:    // case steward:
        -: 1119:      if (choice1 == 1)
        -: 1120:	{
        -: 1121:	  //+2 cards
        -: 1122:	  drawCard(currentPlayer, state);
        -: 1123:	  drawCard(currentPlayer, state);
        -: 1124:	}
        -: 1125:      else if (choice1 == 2)
        -: 1126:	{
        -: 1127:	  //+2 coins
        -: 1128:	  state->coins = state->coins + 2;
        -: 1129:	}
        -: 1130:      else
        -: 1131:	{
        -: 1132:	  //trash 2 cards in hand
        -: 1133:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1134:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1135:	}
        -: 1136:			
        -: 1137:      //discard card from hand
        -: 1138:      discardCard(handPos, currentPlayer, state, 0);
        -: 1139:      return 0;
        -: 1140:		
        -: 1141:    case tribute:
    #####: 1142:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1143:	if (state->deckCount[nextPlayer] > 0){
    #####: 1144:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1145:	  state->deckCount[nextPlayer]--;
        -: 1146:	}
    #####: 1147:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1148:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1149:	  state->discardCount[nextPlayer]--;
        -: 1150:	}
        -: 1151:	else{
        -: 1152:	  //No Card to Reveal
    #####: 1153:	  if (DEBUG){
        -: 1154:	    printf("No cards to reveal\n");
        -: 1155:	  }
        -: 1156:	}
        -: 1157:      }
        -: 1158:	    
        -: 1159:      else{
    #####: 1160:	if (state->deckCount[nextPlayer] == 0){
    #####: 1161:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1162:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1163:	    state->deckCount[nextPlayer]++;
    #####: 1164:	    state->discard[nextPlayer][i] = -1;
    #####: 1165:	    state->discardCount[nextPlayer]--;
        -: 1166:	  }
        -: 1167:			    
    #####: 1168:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1169:	} 
    #####: 1170:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1171:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1172:	state->deckCount[nextPlayer]--;
    #####: 1173:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1174:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1175:	state->deckCount[nextPlayer]--;
        -: 1176:      }    
        -: 1177:		       
    #####: 1178:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1179:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1180:	state->playedCardCount++;
    #####: 1181:	tributeRevealedCards[1] = -1;
        -: 1182:      }
        -: 1183:
    #####: 1184:      for (i = 0; i <= 2; i ++){
    #####: 1185:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1186:	  state->coins += 2;
        -: 1187:	}
        -: 1188:		    
    #####: 1189:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1190:	  drawCard(currentPlayer, state);
    #####: 1191:	  drawCard(currentPlayer, state);
        -: 1192:	}
        -: 1193:	else{//Action Card
    #####: 1194:	  state->numActions = state->numActions + 2;
        -: 1195:	}
        -: 1196:      }
        -: 1197:	    
    #####: 1198:      return 0;
        -: 1199:		
        -: 1200:    case ambassador:
    #####: 1201:      j = 0;		//used to check if player has enough cards to discard
        -: 1202:
    #####: 1203:      if (choice2 > 2 || choice2 < 0)
        -: 1204:	{
    #####: 1205:	  return -1;				
        -: 1206:	}
        -: 1207:
    #####: 1208:      if (choice1 == handPos)
        -: 1209:	{
    #####: 1210:	  return -1;
        -: 1211:	}
        -: 1212:
    #####: 1213:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1214:	{
    #####: 1215:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1216:	    {
    #####: 1217:	      j++;
        -: 1218:	    }
        -: 1219:	}
    #####: 1220:      if (j < choice2)
        -: 1221:	{
    #####: 1222:	  return -1;				
        -: 1223:	}
        -: 1224:
    #####: 1225:      if (DEBUG) 
        -: 1226:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1227:
        -: 1228:      //increase supply count for choosen card by amount being discarded
    #####: 1229:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1230:			
        -: 1231:      //each other player gains a copy of revealed card
    #####: 1232:      for (i = 0; i < state->numPlayers; i++)
        -: 1233:	{
    #####: 1234:	  if (i != currentPlayer)
        -: 1235:	    {
    #####: 1236:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1237:	    }
        -: 1238:	}
        -: 1239:
        -: 1240:      //discard played card from hand
    #####: 1241:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1242:
        -: 1243:      //trash copies of cards returned to supply
    #####: 1244:      for (j = 0; j < choice2; j++)
        -: 1245:	{
    #####: 1246:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1247:	    {
    #####: 1248:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1249:		{
    #####: 1250:		  discardCard(i, currentPlayer, state, 1);
    #####: 1251:		  break;
        -: 1252:		}
        -: 1253:	    }
        -: 1254:	}			
        -: 1255:
    #####: 1256:      return 0;
        -: 1257:		
        -: 1258:    case cutpurse:
        -: 1259:
    #####: 1260:      updateCoins(currentPlayer, state, 2);
    #####: 1261:      for (i = 0; i < state->numPlayers; i++)
        -: 1262:	{
    #####: 1263:	  if (i != currentPlayer)
        -: 1264:	    {
    #####: 1265:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1266:		{
    #####: 1267:		  if (state->hand[i][j] == copper)
        -: 1268:		    {
    #####: 1269:		      discardCard(j, i, state, 0);
    #####: 1270:		      break;
        -: 1271:		    }
    #####: 1272:		  if (j == state->handCount[i])
        -: 1273:		    {
    #####: 1274:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1275:			{
    #####: 1276:			  if (DEBUG)
        -: 1277:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1278:			}	
    #####: 1279:		      break;
        -: 1280:		    }		
        -: 1281:		}
        -: 1282:					
        -: 1283:	    }
        -: 1284:				
        -: 1285:	}				
        -: 1286:
        -: 1287:      //discard played card from hand
    #####: 1288:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1289:
    #####: 1290:      return 0;
        -: 1291:
        -: 1292:		
        -: 1293:    case embargo: 
        -: 1294:      //+2 Coins
        -: 1295:	  //printf("state coin is % d \n", state->coins);
        1: 1296:      state->coins = state->coins + 2;
        -: 1297:			
        -: 1298:      //see if selected pile is in play
        1: 1299:      if ( state->supplyCount[choice1] == -1 )
        -: 1300:	{
    #####: 1301:	  return -1;
        -: 1302:	}
        -: 1303:			
        -: 1304:      //add embargo token to selected supply pile
        1: 1305:      state->embargoTokens[choice1]++;
        -: 1306:			
        -: 1307:      //trash card
        1: 1308:      discardCard(handPos, currentPlayer, state, 1);
        -: 1309:	  //printf("state coin after is % d \n", state->coins);	  
        1: 1310:      return 0;
        -: 1311:		
        -: 1312:    case outpost:
        -: 1313:      //set outpost flag
    #####: 1314:      state->outpostPlayed++;
        -: 1315:			
        -: 1316:      //discard card
    #####: 1317:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1318:      return 0;
        -: 1319:		
        -: 1320:    case salvager:
        -: 1321:      //+1 buy
    #####: 1322:      state->numBuys++;
        -: 1323:			
    #####: 1324:      if (choice1)
        -: 1325:	{
        -: 1326:	  //gain coins equal to trashed card
    #####: 1327:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1328:	  //trash card
    #####: 1329:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1330:	}
        -: 1331:			
        -: 1332:      //discard card
    #####: 1333:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1334:      return 0;
        -: 1335:		
        -: 1336:    case sea_hag:
    #####: 1337:      for (i = 0; i < state->numPlayers; i++){
    #####: 1338:	if (i != currentPlayer){
    #####: 1339:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1340:	  state->discardCount[i]++;
    #####: 1341:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1342:	}
        -: 1343:      }
    #####: 1344:      return 0;
        -: 1345:		
        -: 1346:    case treasure_map:
        -: 1347:      //search hand for another treasure_map
    #####: 1348:      index = -1;
    #####: 1349:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1350:	{
    #####: 1351:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1352:	    {
    #####: 1353:	      index = i;
    #####: 1354:	      break;
        -: 1355:	    }
        -: 1356:	}
    #####: 1357:      if (index > -1)
        -: 1358:	{
        -: 1359:	  //trash both treasure cards
    #####: 1360:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1361:	  discardCard(index, currentPlayer, state, 1);
        -: 1362:
        -: 1363:	  //gain 4 Gold cards
    #####: 1364:	  for (i = 0; i < 4; i++)
        -: 1365:	    {
    #####: 1366:	      gainCard(gold, state, 1, currentPlayer);
        -: 1367:	    }
        -: 1368:				
        -: 1369:	  //return success
    #####: 1370:	  return 1;
        -: 1371:	}
        -: 1372:			
        -: 1373:      //no second treasure_map found in hand
    #####: 1374:      return -1;
        -: 1375:    }
        -: 1376:	
    #####: 1377:  return -1;
        -: 1378:}
        -: 1379:
        1: 1380:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1381:{
        -: 1382:	
        -: 1383:  //if card is not trashed, added to Played pile 
        1: 1384:  if (trashFlag < 1)
        -: 1385:    {
        -: 1386:      //add card to played pile
    #####: 1387:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1388:      state->playedCardCount++;
        -: 1389:    }
        -: 1390:	
        -: 1391:  //set played card to -1
        1: 1392:  state->hand[currentPlayer][handPos] = -1;
        -: 1393:	
        -: 1394:  //remove card from player's hand
        1: 1395:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1396:    {
        -: 1397:      //reduce number of cards in hand
    #####: 1398:      state->handCount[currentPlayer]--;
        -: 1399:    }
        1: 1400:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1401:    {
        -: 1402:      //reduce number of cards in hand
    #####: 1403:      state->handCount[currentPlayer]--;
        -: 1404:    }
        -: 1405:  else 	
        -: 1406:    {
        -: 1407:      //replace discarded card with last card in hand
        1: 1408:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1409:      //set last card to -1
        1: 1410:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1411:      //reduce number of cards in hand
        1: 1412:      state->handCount[currentPlayer]--;
        -: 1413:    }
        -: 1414:	
        1: 1415:  return 0;
        -: 1416:}
        -: 1417:
    #####: 1418:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1419:{
        -: 1420:  //Note: supplyPos is enum of choosen card
        -: 1421:	
        -: 1422:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1423:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1424:    {
    #####: 1425:      return -1;
        -: 1426:    }
        -: 1427:	
        -: 1428:  //added card for [whoseTurn] current player:
        -: 1429:  // toFlag = 0 : add to discard
        -: 1430:  // toFlag = 1 : add to deck
        -: 1431:  // toFlag = 2 : add to hand
        -: 1432:
    #####: 1433:  if (toFlag == 1)
        -: 1434:    {
    #####: 1435:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1436:      state->deckCount[player]++;
        -: 1437:    }
    #####: 1438:  else if (toFlag == 2)
        -: 1439:    {
    #####: 1440:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1441:      state->handCount[player]++;
        -: 1442:    }
        -: 1443:  else
        -: 1444:    {
    #####: 1445:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1446:      state->discardCount[player]++;
        -: 1447:    }
        -: 1448:	
        -: 1449:  //decrease number in supply pile
    #####: 1450:  state->supplyCount[supplyPos]--;
        -: 1451:	 
    #####: 1452:  return 0;
        -: 1453:}
        -: 1454:
        1: 1455:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1456:{
        -: 1457:  int i;
        -: 1458:	
        -: 1459:  //reset coin count
        1: 1460:  state->coins = 0;
        -: 1461:
        -: 1462:  //add coins for each Treasure card in player's hand
        6: 1463:  for (i = 0; i < state->handCount[player]; i++)
        -: 1464:    {
        5: 1465:      if (state->hand[player][i] == copper)
        -: 1466:	{
        4: 1467:	  state->coins += 1;
        -: 1468:	}
        1: 1469:      else if (state->hand[player][i] == silver)
        -: 1470:	{
    #####: 1471:	  state->coins += 2;
        -: 1472:	}
        1: 1473:      else if (state->hand[player][i] == gold)
        -: 1474:	{
    #####: 1475:	  state->coins += 3;
        -: 1476:	}	
        -: 1477:    }	
        -: 1478:
        -: 1479:  //add bonus
        -: 1480:	//printf ("bonus is %d \n", bonus);
        -: 1481:	//printf("state coin before adding bonus % d \n", state->coins);
        1: 1482:	state->coins += bonus;
        -: 1483:	//printf("state coin after adding bonus % d \n", state->coins);
        -: 1484:
        -: 1485:  // debugg statement
        -: 1486:  //printf("total coins : %d \n", state->coins);
        -: 1487:
        1: 1488:  return 0;
        -: 1489:}
        -: 1490:
        -: 1491:
        -: 1492://end of dominion.c
        -: 1493:
