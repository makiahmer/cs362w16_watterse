        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <assert.h>
        -:    8:
        -:    9:// int smithyfunc(struct gameState* state, int handPos){
        -:   10:	
        -:   11:	// printf("inside smithyfunc\n\n\n\n\n");
        -:   12:	// int i = 0;
        -:   13:	// int currentPlayer = whoseTurn(state);
        -:   14:	 // +3 Cards
        -:   15:      // for (i = 0; i < 5; i++)
        -:   16:	// {
        -:   17:	  // drawCard(currentPlayer, state);
        -:   18:	// }
        -:   19:			
        -:   20:      //discard card from hand
        -:   21:      // discardCard(handPos, currentPlayer, state, 0);
        -:   22:      // return 0;
        -:   23:// }
        -:   24:
        2:   25:int main(){
        -:   26:	struct gameState g;
        -:   27:	int i, ret;
        -:   28:	
        -:   29:	  int k[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, 
        2:   30:	       sea_hag, tribute, smithy};
        -:   31:
        2:   32:	printf ("Starting game.\n");
        -:   33:	
        2:   34:	initializeGame(2, k, 5, &g);
        -:   35:		   
        2:   36:	g.hand[0][0] = smithy;
        -:   37:	
        2:   38:	assert(g.handCount[0] == 5);
        2:   39:	smithyfunc(&g, 0);
        -:   40:
        2:   41:	assert(g.handCount[0] == 9);
        2:   42:	printf ("smithyfunc works \n");
        2:   43:	return 0;
        -:   44:}