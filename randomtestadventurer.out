Running Random Adventurer Test
302 of 1000 of test has passed
Tests Complete
File 'dominion.c'
Lines executed:24.96% of 577
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
    23170:    8:int compare(const void* a, const void* b) {
    23170:    9:  if (*(int*)a > *(int*)b)
      770:   10:    return 1;
    22400:   11:  if (*(int*)a < *(int*)b)
     5077:   12:  if (*(int*)a < *(int*)b)
     5077:   13:    return -1;
    17323:   14:  return 0;
        -:   15:}
        -:   16:
    #####:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
    #####:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
     1000:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:
        -:   41:  int i;
        -:   42:  int j;
        -:   43:  int it;			
        -:   44:  //set up random number generator
     1000:   45:  SelectStream(1);
     1000:   46:  PutSeed((long)randomSeed);
        -:   47:  
        -:   48:  //check number of players
     1000:   49:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   50:    {
      484:   51:      return -1;
        -:   52:    }
        -:   53:
        -:   54:  //set number of players
      516:   55:  state->numPlayers = numPlayers;
        -:   56:
        -:   57:  //check selected kingdom cards are different
     5676:   58:  for (i = 0; i < 10; i++)
        -:   59:    {
    56760:   60:      for (j = 0; j < 10; j++)
        -:   61:        {
    51600:   62:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   63:	    {
    #####:   64:	      return -1;
        -:   65:	    }
        -:   66:        }
        -:   67:    }
        -:   68:
        -:   69:
        -:   70:  //initialize supply
        -:   71:  ///////////////////////////////
        -:   72:
        -:   73:  //set number of Curse cards
      516:   74:  if (numPlayers == 2)
        -:   75:    {
      279:   76:      state->supplyCount[curse] = 10;
        -:   77:    }
      237:   78:  else if (numPlayers == 3)
        -:   79:    {
      237:   80:      state->supplyCount[curse] = 20;
        -:   81:    }
        -:   82:  else
        -:   83:    {
    #####:   84:      state->supplyCount[curse] = 30;
        -:   85:    }
        -:   86:
        -:   87:  //set number of Victory cards
      516:   88:  if (numPlayers == 2)
        -:   89:    {
      279:   90:      state->supplyCount[estate] = 8;
      279:   91:      state->supplyCount[duchy] = 8;
      279:   92:      state->supplyCount[province] = 8;
        -:   93:    }
        -:   94:  else
        -:   95:    {
      237:   96:      state->supplyCount[estate] = 12;
      237:   97:      state->supplyCount[duchy] = 12;
      237:   98:      state->supplyCount[province] = 12;
        -:   99:    }
        -:  100:
        -:  101:  //set number of Treasure cards
      516:  102:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      516:  103:  state->supplyCount[silver] = 40;
      516:  104:  state->supplyCount[gold] = 30;
        -:  105:
        -:  106:  //set number of Kingdom cards
    10836:  107:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  108:    {
    85140:  109:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  110:	{
    79980:  111:	  if (kingdomCards[j] == i)
        -:  112:	    {
        -:  113:	      //check if card is a 'Victory' Kingdom card
     5676:  114:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  115:		{
      516:  116:		  if (numPlayers == 2){ 
      279:  117:		    state->supplyCount[i] = 8; 
        -:  118:		  }
      237:  119:		  else{ state->supplyCount[i] = 12; }
        -:  120:		}
        -:  121:	      else
        -:  122:		{
     4644:  123:		  state->supplyCount[i] = 10;
        -:  124:		}
     5160:  125:	      break;
        -:  126:	    }
        -:  127:	  else    //card is not in the set choosen for the game
        -:  128:	    {
    74820:  129:	      state->supplyCount[i] = -1;
        -:  130:	    }
        -:  131:	}
        -:  132:
        -:  133:    }
        -:  134:
        -:  135:  ////////////////////////
        -:  136:  //supply intilization complete
        -:  137:
        -:  138:  //set player decks
     1785:  139:  for (i = 0; i < numPlayers; i++)
        -:  140:    {
     1269:  141:      state->deckCount[i] = 0;
     5076:  142:      for (j = 0; j < 3; j++)
        -:  143:	{
     3807:  144:	  state->deck[i][j] = estate;
     3807:  145:	  state->deckCount[i]++;
        -:  146:	}
    10152:  147:      for (j = 3; j < 10; j++)
        -:  148:	{
     8883:  149:	  state->deck[i][j] = copper;
     8883:  150:	  state->deckCount[i]++;		
        -:  151:	}
        -:  152:    }
        -:  153:
        -:  154:  //shuffle player decks
     1785:  155:  for (i = 0; i < numPlayers; i++)
        -:  156:    {
     1269:  157:      if ( shuffle(i, state) < 0 )
        -:  158:	{
    #####:  159:	  return -1;
        -:  160:	}
        -:  161:    }
        -:  162:
        -:  163:  //draw player hands
     1785:  164:  for (i = 0; i < numPlayers; i++)
        -:  165:    {  
        -:  166:      //initialize hand size to zero
     1269:  167:      state->handCount[i] = 0;
     1269:  168:      state->discardCount[i] = 0;
        -:  169:      //draw 5 cards
        -:  170:      // for (j = 0; j < 5; j++)
        -:  171:      //	{
        -:  172:      //	  drawCard(i, state);
        -:  173:      //	}
        -:  174:    }
        -:  175:  
        -:  176:  //set embargo tokens to 0 for all supply piles
    14448:  177:  for (i = 0; i <= treasure_map; i++)
        -:  178:    {
    13932:  179:      state->embargoTokens[i] = 0;
        -:  180:    }
        -:  181:
        -:  182:  //initialize first player's turn
      516:  183:  state->outpostPlayed = 0;
      516:  184:  state->phase = 0;
      516:  185:  state->numActions = 1;
      516:  186:  state->numBuys = 1;
      516:  187:  state->playedCardCount = 0;
      516:  188:  state->whoseTurn = 0;
      516:  189:  state->handCount[state->whoseTurn] = 0;
        -:  190:  //int it; move to top
        -:  191:
        -:  192:  //Moved draw cards to here, only drawing at the start of a turn
     3096:  193:  for (it = 0; it < 5; it++){
     2580:  194:    drawCard(state->whoseTurn, state);
        -:  195:  }
        -:  196:
      516:  197:  updateCoins(state->whoseTurn, state, 0);
        -:  198:
      516:  199:  return 0;
        -:  200:}
        -:  201:
     1337:  202:int shuffle(int player, struct gameState *state) {
        -:  203: 
        -:  204:
        -:  205:  int newDeck[MAX_DECK];
     1337:  206:  int newDeckPos = 0;
        -:  207:  int card;
        -:  208:  int i;
        -:  209:
     1337:  210:  if (state->deckCount[player] < 1)
       63:  211:    return -1;
     1274:  212:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  213:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  214:
    16106:  215:  while (state->deckCount[player] > 0) {
    13558:  216:    card = floor(Random() * state->deckCount[player]);
    13558:  217:    newDeck[newDeckPos] = state->deck[player][card];
    13558:  218:    newDeckPos++;
   118503:  219:    for (i = card; i < state->deckCount[player]-1; i++) {
   104945:  220:      state->deck[player][i] = state->deck[player][i+1];
        -:  221:    }
    13558:  222:    state->deckCount[player]--;
        -:  223:  }
    14832:  224:  for (i = 0; i < newDeckPos; i++) {
    13558:  225:    state->deck[player][i] = newDeck[i];
    13558:  226:    state->deckCount[player]++;
        -:  227:  }
        -:  228:
     1274:  229:  return 0;
        -:  230:}
        -:  231:
    #####:  232:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  233:{	
        -:  234:  int card;
    #####:  235:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  236:
        -:  237:  //check if it is the right phase
    #####:  238:  if (state->phase != 0)
        -:  239:    {
    #####:  240:      return -1;
        -:  241:    }
        -:  242:	
        -:  243:  //check if player has enough actions
    #####:  244:  if ( state->numActions < 1 )
        -:  245:    {
    #####:  246:      return -1;
        -:  247:    }
        -:  248:	
        -:  249:  //get card played
    #####:  250:  card = handCard(handPos, state);
        -:  251:	
        -:  252:  //check if selected card is an action
    #####:  253:  if ( card < adventurer || card > treasure_map )
        -:  254:    {
    #####:  255:      return -1;
        -:  256:    }
        -:  257:	
        -:  258:  //play card
    #####:  259:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  260:    {
    #####:  261:      return -1;
        -:  262:    }
        -:  263:	
        -:  264:  //reduce number of actions
    #####:  265:  state->numActions--;
        -:  266:  
        -:  267://printf("state coin before update coins is % d \n", state->coins);
        -:  268://update coins (Treasure cards may be added with card draws)
    #####:  269:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  270:	
    #####:  271:  return 0;
        -:  272:}
        -:  273:
    #####:  274:int buyCard(int supplyPos, struct gameState *state) {
        -:  275:  int who;
    #####:  276:  if (DEBUG){
        -:  277:    printf("Entering buyCard...\n");
        -:  278:  }
        -:  279:
        -:  280:  // I don't know what to do about the phase thing.
        -:  281:
    #####:  282:  who = state->whoseTurn;
        -:  283:
    #####:  284:  if (state->numBuys < 1){
    #####:  285:    if (DEBUG)
        -:  286:      printf("You do not have any buys left\n");
    #####:  287:    return -1;
    #####:  288:  } else if (supplyCount(supplyPos, state) <1){
    #####:  289:    if (DEBUG)
        -:  290:      printf("There are not any of that type of card left\n");
    #####:  291:    return -1;
    #####:  292:  } else if (state->coins < getCost(supplyPos)){
    #####:  293:    if (DEBUG) 
        -:  294:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  295:    return -1;
        -:  296:  } else {
    #####:  297:    state->phase=1;
        -:  298:    //state->supplyCount[supplyPos]--;
    #####:  299:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  300:  
    #####:  301:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  302:    state->numBuys--;
    #####:  303:    if (DEBUG)
        -:  304:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  305:  }
        -:  306:
        -:  307:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  308:  //state->discardCount[who]++;
        -:  309:    
    #####:  310:  return 0;
        -:  311:}
        -:  312:
    #####:  313:int numHandCards(struct gameState *state) {
    #####:  314:  return state->handCount[ whoseTurn(state) ];
        -:  315:}
        -:  316:
    #####:  317:int handCard(int handPos, struct gameState *state) {
    #####:  318:  int currentPlayer = whoseTurn(state);
    #####:  319:  return state->hand[currentPlayer][handPos];
        -:  320:}
        -:  321:
    #####:  322:int supplyCount(int card, struct gameState *state) {
    #####:  323:  return state->supplyCount[card];
        -:  324:}
        -:  325:
    #####:  326:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  327:  int i;
    #####:  328:  int count = 0;
        -:  329:
    #####:  330:  for (i = 0; i < state->deckCount[player]; i++)
        -:  331:    {
    #####:  332:      if (state->deck[player][i] == card) count++;
        -:  333:    }
        -:  334:
    #####:  335:  for (i = 0; i < state->handCount[player]; i++)
        -:  336:    {
    #####:  337:      if (state->hand[player][i] == card) count++;
        -:  338:    }
        -:  339:
    #####:  340:  for (i = 0; i < state->discardCount[player]; i++)
        -:  341:    {
    #####:  342:      if (state->discard[player][i] == card) count++;
        -:  343:    }
        -:  344:
    #####:  345:  return count;
        -:  346:}
        -:  347:
     2000:  348:int whoseTurn(struct gameState *state) {
     2000:  349:  return state->whoseTurn;
        -:  350:}
        -:  351:
    #####:  352:int endTurn(struct gameState *state) {
        -:  353:  int k;
        -:  354:  int i;
    #####:  355:  int currentPlayer = whoseTurn(state);
        -:  356:  
        -:  357:  //Discard hand
    #####:  358:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  359:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  360:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  361:  }
    #####:  362:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  363:    
        -:  364:  //Code for determining the player
    #####:  365:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  366:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  367:  }
        -:  368:  else{
    #####:  369:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  370:  }
        -:  371:
    #####:  372:  state->outpostPlayed = 0;
    #####:  373:  state->phase = 0;
    #####:  374:  state->numActions = 1;
    #####:  375:  state->coins = 0;
    #####:  376:  state->numBuys = 1;
    #####:  377:  state->playedCardCount = 0;
    #####:  378:  state->handCount[state->whoseTurn] = 0;
        -:  379:
        -:  380:  //int k; move to top
        -:  381:  //Next player draws hand
    #####:  382:  for (k = 0; k < 5; k++){
    #####:  383:    drawCard(state->whoseTurn, state);//Draw a card
        -:  384:  }
        -:  385:
        -:  386:  //Update money
    #####:  387:  updateCoins(state->whoseTurn, state , 0);
        -:  388:
    #####:  389:  return 0;
        -:  390:}
        -:  391:
    #####:  392:int isGameOver(struct gameState *state) {
        -:  393:  int i;
        -:  394:  int j;
        -:  395:	
        -:  396:  //if stack of Province cards is empty, the game ends
    #####:  397:  if (state->supplyCount[province] == 0)
        -:  398:    {
    #####:  399:      return 1;
        -:  400:    }
        -:  401:
        -:  402:  //if three supply pile are at 0, the game ends
    #####:  403:  j = 0;
    #####:  404:  for (i = 0; i < 25; i++)
        -:  405:    {
    #####:  406:      if (state->supplyCount[i] == 0)
        -:  407:	{
    #####:  408:	  j++;
        -:  409:	}
        -:  410:    }
    #####:  411:  if ( j >= 3)
        -:  412:    {
    #####:  413:      return 1;
        -:  414:    }
        -:  415:
    #####:  416:  return 0;
        -:  417:}
        -:  418:
    #####:  419:int scoreFor (int player, struct gameState *state) {
        -:  420:
        -:  421:  int i;
    #####:  422:  int score = 0;
        -:  423:  //score from hand
    #####:  424:  for (i = 0; i < state->handCount[player]; i++)
        -:  425:    {
    #####:  426:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  427:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  428:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  429:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  430:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  431:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  432:    }
        -:  433:
        -:  434:  //score from discard
    #####:  435:  for (i = 0; i < state->discardCount[player]; i++)
        -:  436:    {
    #####:  437:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  438:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  439:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  440:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  441:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  442:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  443:    }
        -:  444:
        -:  445:  //score from deck
    #####:  446:  for (i = 0; i < state->discardCount[player]; i++)
        -:  447:    {
    #####:  448:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  449:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  450:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  451:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  452:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  453:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  454:    }
        -:  455:
    #####:  456:  return score;
        -:  457:}
        -:  458:
    #####:  459:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  460:  int i;	
        -:  461:  int j;
        -:  462:  int highScore;
        -:  463:  int currentPlayer;
        -:  464:
        -:  465:  //get score for each player
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
        -:  468:      //set unused player scores to -9999
    #####:  469:      if (i >= state->numPlayers)
        -:  470:	{
    #####:  471:	  players[i] = -9999;
        -:  472:	}
        -:  473:      else
        -:  474:	{
    #####:  475:	  players[i] = scoreFor (i, state);
        -:  476:	}
        -:  477:    }
        -:  478:
        -:  479:  //find highest score
    #####:  480:  j = 0;
    #####:  481:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  482:    {
    #####:  483:      if (players[i] > players[j])
        -:  484:	{
    #####:  485:	  j = i;
        -:  486:	}
        -:  487:    }
    #####:  488:  highScore = players[j];
        -:  489:
        -:  490:  //add 1 to players who had less turns
    #####:  491:  currentPlayer = whoseTurn(state);
    #####:  492:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  493:    {
    #####:  494:      if ( players[i] == highScore && i > currentPlayer )
        -:  495:	{
    #####:  496:	  players[i]++;
        -:  497:	}
        -:  498:    }
        -:  499:
        -:  500:  //find new highest score
    #####:  501:  j = 0;
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  503:    {
    #####:  504:      if ( players[i] > players[j] )
        -:  505:	{
    #####:  506:	  j = i;
        -:  507:	}
        -:  508:    }
    #####:  509:  highScore = players[j];
        -:  510:
        -:  511:  //set winners in array to 1 and rest to 0
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  513:    {
    #####:  514:      if ( players[i] == highScore )
        -:  515:	{
    #####:  516:	  players[i] = 1;
        -:  517:	}
        -:  518:      else
        -:  519:	{
    #####:  520:	  players[i] = 0;
        -:  521:	}
        -:  522:    }
        -:  523:
    #####:  524:  return 0;
        -:  525:}
        -:  526:
   183363:  527:int drawCard(int player, struct gameState *state)
        -:  528:{	int count;
        -:  529:  int deckCounter;
   183363:  530:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  531:    
        -:  532:    //Step 1 Shuffle the discard pile back into a deck
        -:  533:    int i;
        -:  534:    //Move discard to deck
      902:  535:    for (i = 0; i < state->discardCount[player];i++){
      868:  536:      state->deck[player][i] = state->discard[player][i];
      868:  537:      state->discard[player][i] = -1;
        -:  538:    }
        -:  539:
       34:  540:    state->deckCount[player] = state->discardCount[player];
       34:  541:    state->discardCount[player] = 0;//Reset discard
        -:  542:
        -:  543:    //Shufffle the deck
       34:  544:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  545:   
       34:  546:    if (DEBUG){//Debug statements
        -:  547:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  548:    }
        -:  549:    
       34:  550:    state->discardCount[player] = 0;
        -:  551:
        -:  552:    //Step 2 Draw Card
       34:  553:    count = state->handCount[player];//Get current player's hand count
        -:  554:    
       34:  555:    if (DEBUG){//Debug statements
        -:  556:      printf("Current hand count: %d\n", count);
        -:  557:    }
        -:  558:    
       34:  559:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  560:
       34:  561:    if (deckCounter == 0)
       29:  562:      return -1;
        -:  563:
        5:  564:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        5:  565:    state->deckCount[player]--;
        5:  566:    state->handCount[player]++;//Increment hand count
        -:  567:  }
        -:  568:
        -:  569:  else{
   183329:  570:    int count = state->handCount[player];//Get current hand count for player
        -:  571:    int deckCounter;
   183329:  572:    if (DEBUG){//Debug statements
        -:  573:      printf("Current hand count: %d\n", count);
        -:  574:    }
        -:  575:
   183329:  576:    deckCounter = state->deckCount[player];//Create holder for the deck count
   183329:  577:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   183329:  578:    state->deckCount[player]--;
   183329:  579:    state->handCount[player]++;//Increment hand count
        -:  580:  }
        -:  581:
   183334:  582:  return 0;
        -:  583:}
        -:  584:
    #####:  585:int getCost(int cardNumber)
        -:  586:{
    #####:  587:  switch( cardNumber ) 
        -:  588:    {
        -:  589:    case curse:
    #####:  590:      return 0;
        -:  591:    case estate:
    #####:  592:      return 2;
        -:  593:    case duchy:
    #####:  594:      return 5;
        -:  595:    case province:
    #####:  596:      return 8;
        -:  597:    case copper:
    #####:  598:      return 0;
        -:  599:    case silver:
    #####:  600:      return 3;
        -:  601:    case gold:
    #####:  602:      return 6;
        -:  603:    case adventurer:
    #####:  604:      return 6;
        -:  605:    case council_room:
    #####:  606:      return 5;
        -:  607:    case feast:
    #####:  608:      return 4;
        -:  609:    case gardens:
    #####:  610:      return 4;
        -:  611:    case mine:
    #####:  612:      return 5;
        -:  613:    case remodel:
    #####:  614:      return 4;
        -:  615:    case smithy:
    #####:  616:      return 4;
        -:  617:    case village:
    #####:  618:      return 3;
        -:  619:    case baron:
    #####:  620:      return 4;
        -:  621:    case great_hall:
    #####:  622:      return 3;
        -:  623:    case minion:
    #####:  624:      return 5;
        -:  625:    case steward:
    #####:  626:      return 3;
        -:  627:    case tribute:
    #####:  628:      return 5;
        -:  629:    case ambassador:
    #####:  630:      return 3;
        -:  631:    case cutpurse:
    #####:  632:      return 4;
        -:  633:    case embargo: 
    #####:  634:      return 2;
        -:  635:    case outpost:
    #####:  636:      return 5;
        -:  637:    case salvager:
    #####:  638:      return 4;
        -:  639:    case sea_hag:
    #####:  640:      return 4;
        -:  641:    case treasure_map:
    #####:  642:      return 4;
        -:  643:    }
        -:  644:	
    #####:  645:  return -1;
        -:  646:}
        -:  647:
        -:  648:
        -:  649://*refactor function for council_room affect*
    #####:  650:int councilfunc(struct gameState* state, int handPos){
        -:  651:	//printf("inside council_room function \n\n\n\n\n\n");
    #####:  652:	int i = 0;
    #####:  653:	int currentPlayer = whoseTurn(state);
        -:  654:	
        -:  655:	     //+4 Cards
    #####:  656:      for (i = 0; i < 4; i++)
        -:  657:	{
    #####:  658:	  drawCard(currentPlayer, state);
        -:  659:	}
        -:  660:			
        -:  661:      //+1 Buy
    #####:  662:      state->numBuys++;
        -:  663:			
        -:  664:      //Each other player draws a card
    #####:  665:      for (i = 0; i < state->numPlayers; i++)
        -:  666:	{
    #####:  667:	  if ( i != currentPlayer )
        -:  668:	    {
    #####:  669:	      drawCard(i, state);
        -:  670:	    }
        -:  671:	}
        -:  672:			
        -:  673:      //put played card in played card pile
    #####:  674:      discardCard(handPos, currentPlayer, state, 0);
        -:  675:			
    #####:  676:      return 0;
        -:  677:	
        -:  678:	
        -:  679:}
        -:  680://*refactor function for smithy affect*
    #####:  681:int smithyfunc(struct gameState* state, int handPos){
        -:  682:	
        -:  683:	//printf("inside smithyfunc\n\n\n\n\n");
    #####:  684:	int i = 0;
    #####:  685:	int currentPlayer = whoseTurn(state);
        -:  686:	  //+3 Cards
    #####:  687:      for (i = 0; i < 5; i++)
        -:  688:	{
    #####:  689:	  drawCard(currentPlayer, state);
        -:  690:
        -:  691:	}
        -:  692:			
        -:  693:      //discard card from hand
    #####:  694:      discardCard(handPos, currentPlayer, state, 0);
    #####:  695:      return 0;
        -:  696:}
        -:  697:
        -:  698://*refactor function for adventurer affect*
     1000:  699:int adventurerfunc( struct gameState* state){
        -:  700:	//printf("inside adventurerfunc\n\n\n\n\n");
     1000:  701:	int currentPlayer = whoseTurn(state);
        -:  702:	int cardDrawn;
        -:  703:	int temphand[MAX_HAND];
     1000:  704:	int z = 0;
     1000:  705:	int drawntreasure = 0;
        -:  706:	
   182783:  707:	while(drawntreasure<2){
   180783:  708:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
       34:  709:	  shuffle(currentPlayer, state);
        -:  710:	}
   180783:  711:	drawCard(currentPlayer, state);
   180783:  712:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  713:	
   181783:  714:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
     1000:  715:		drawntreasure++;
     1000:  716:		drawntreasure+= 8;
        -:  717:	}
        -:  718:	
        -:  719:	else{
   179783:  720:	  temphand[z]=cardDrawn;
   179783:  721:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   179783:  722:	  z++;
        -:  723:	}
        -:  724:      }
   181783:  725:      while(z-1>=0){
   179783:  726:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   179783:  727:	z=z-1;
        -:  728:      }
        -:  729:	  
     1000:  730:      return 0;
        -:  731:	
        -:  732:	
        -:  733:}
        -:  734:
        -:  735://*refactor function for village affect*
        -:  736:
    #####:  737:int villagefunc (struct gameState* state, int handPos){
        -:  738:	  //printf("inside villagefunc\n\n\n\n\n");
    #####:  739:	  int currentPlayer = whoseTurn(state);
        -:  740:	
        -:  741:	  //+1 Card
    #####:  742:      drawCard(currentPlayer, state);
        -:  743:			
        -:  744:      //+2 Actions
    #####:  745:      state->numActions = state->numActions + 2;
        -:  746:			
        -:  747:      //discard played card from hand
    #####:  748:      discardCard(handPos, currentPlayer, state, 0);
        -:  749:	  
    #####:  750:	  printf("Inside villagefunc \n\n\n\n\n");
    #####:  751:      return 0;	
        -:  752:	
        -:  753:}
        -:  754:
        -:  755://*refactor function for minion affect*
        -:  756:
    #####:  757:int minionfunc(int choice1, int choice2, struct gameState* state, int handPos){
        -:  758:	//printf("inside minionfunc\n\n\n\n\n");
        -:  759:	int i,j;
    #####:  760:	int currentPlayer = whoseTurn(state);
        -:  761:	
        -:  762:	  //+1 action
    #####:  763:      state->numActions++;
        -:  764:			
        -:  765:      //discard card from hand
    #####:  766:      discardCard(handPos, currentPlayer, state, 0);
        -:  767:			
    #####:  768:      if (choice1)		//+2 coins
        -:  769:	{
    #####:  770:	  state->coins = state->coins + 2;
        -:  771:	}
        -:  772:			
    #####:  773:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  774:	{
        -:  775:	  //discard hand
    #####:  776:	  while(numHandCards(state) > 0)
        -:  777:	    {
    #####:  778:	      discardCard(handPos, currentPlayer, state, 0);
        -:  779:	    }
        -:  780:				
        -:  781:	  //draw 4
    #####:  782:	  for (i = 0; i < 4; i++)
        -:  783:	    {
    #####:  784:	      drawCard(currentPlayer, state);
        -:  785:	    }
        -:  786:				
        -:  787:	  //other players discard hand and redraw if hand size > 4
    #####:  788:	  for (i = 0; i < state->numPlayers; i++)
        -:  789:	    {
    #####:  790:	      if (i != currentPlayer)
        -:  791:		{
    #####:  792:		  if ( state->handCount[i] > 4 )
        -:  793:		    {
        -:  794:		      //discard hand
    #####:  795:		      while( state->handCount[i] > 0 )
        -:  796:			{
    #####:  797:			  discardCard(handPos, i, state, 0);
        -:  798:			}
        -:  799:							
        -:  800:		      //draw 4
    #####:  801:		      for (j = 0; j < 4; j++)
        -:  802:			{
    #####:  803:			  drawCard(i, state);
        -:  804:			}
        -:  805:		    }
        -:  806:		}
        -:  807:	    }
        -:  808:				
        -:  809:	}
    #####:  810:	printf("inside minion function \n\n\n\n\n");
    #####:  811:      return 0;
        -:  812:}
        -:  813:
        -:  814:
     1000:  815:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  816:{
        -:  817:  int i;
        -:  818:  int j;
        -:  819:  int k;
        -:  820:  int x;
        -:  821:  int index;
     1000:  822:  int currentPlayer = whoseTurn(state);
     1000:  823:  int nextPlayer = currentPlayer + 1;
        -:  824:
     1000:  825:  int tributeRevealedCards[2] = {-1, -1};
        -:  826:  int temphand[MAX_HAND];// moved above the if statement
        -:  827:  //int drawntreasure=0;
        -:  828:  int cardDrawn;
        -:  829:  //int z = 0;// this is the counter for the temp hand
     1000:  830:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  831:    nextPlayer = 0;
        -:  832:  }
        -:  833:  
        -:  834:	
        -:  835:  //uses switch to select card and perform actions
     1000:  836:  switch( card ) 
        -:  837:    {
        -:  838:    case adventurer:
     1000:  839:		return adventurerfunc(state);
        -:  840:      // while(drawntreasure<2){
        -:  841:	// if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  842:	  // shuffle(currentPlayer, state);
        -:  843:	// }
        -:  844:	// drawCard(currentPlayer, state);
        -:  845:	// cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  846:	// if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  847:	  // drawntreasure++;
        -:  848:	// else{
        -:  849:	  // temphand[z]=cardDrawn;
        -:  850:	  // state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  851:	  // z++;
        -:  852:	// }
        -:  853:      // }
        -:  854:      // while(z-1>=0){
        -:  855:	// state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  856:	// z=z-1;
        -:  857:      // }
        -:  858:      // return 0;
        -:  859:			
        -:  860:    case council_room:
    #####:  861:		return councilfunc(state, handPos);
        -:  862:			
        -:  863:    case feast:
        -:  864:      //gain card with cost up to 5
        -:  865:      //Backup hand
        -:  866:	  
    #####:  867:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  868:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  869:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  870:      }
        -:  871:	  
        -:  872:      //Backup hand
        -:  873:
        -:  874:      //Update Coins for Buy
        -:  875:	  
    #####:  876:      updateCoins(currentPlayer, state, 5);
    #####:  877:      x = 1;//Condition to loop on
    #####:  878:      while( x == 1) {//Buy one card
    #####:  879:	if (supplyCount(choice1, state) <= 0){
    #####:  880:	  if (DEBUG)
        -:  881:	    printf("None of that card left, sorry!\n");
        -:  882:
    #####:  883:	  if (DEBUG){
        -:  884:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  885:	  }
        -:  886:	}
    #####:  887:	else if (state->coins < getCost(choice1)){
    #####:  888:	  printf("That card is too expensive!\n");
        -:  889:
    #####:  890:	  if (DEBUG){
        -:  891:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  892:	  }
        -:  893:	}
        -:  894:	else{
        -:  895:
    #####:  896:	  if (DEBUG){
        -:  897:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  898:	  }
        -:  899:
    #####:  900:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  901:	  x = 0;//No more buying cards
        -:  902:
    #####:  903:	  if (DEBUG){
        -:  904:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  905:	  }
        -:  906:
        -:  907:	}
        -:  908:      }     
        -:  909:      //Reset Hand
        -:  910:	  
    #####:  911:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  912:	state->hand[currentPlayer][i] = temphand[i];
    #####:  913:	temphand[i] = -1;
        -:  914:      }
        -:  915:	  
        -:  916:      //Reset Hand
        -:  917:      			
    #####:  918:      return 0;
        -:  919:			
        -:  920:    case gardens:
    #####:  921:      return -1;
        -:  922:			
        -:  923:    case mine:
    #####:  924:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  925:
    #####:  926:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  927:	{
    #####:  928:	  return -1;
        -:  929:	}
        -:  930:		
    #####:  931:      if (choice2 > treasure_map || choice2 < curse)
        -:  932:	{
    #####:  933:	  return -1;
        -:  934:	}
        -:  935:
    #####:  936:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  937:	{
    #####:  938:	  return -1;
        -:  939:	}
        -:  940:
    #####:  941:      gainCard(choice2, state, 2, currentPlayer);
        -:  942:
        -:  943:      //discard card from hand
    #####:  944:      discardCard(handPos, currentPlayer, state, 0);
        -:  945:
        -:  946:      //discard trashed card
    #####:  947:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  948:	{
    #####:  949:	  if (state->hand[currentPlayer][i] == j)
        -:  950:	    {
    #####:  951:	      discardCard(i, currentPlayer, state, 0);			
    #####:  952:	      break;
        -:  953:	    }
        -:  954:	}
        -:  955:			
    #####:  956:      return 0;
        -:  957:			
        -:  958:    case remodel:
    #####:  959:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  960:
    #####:  961:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  962:	{
    #####:  963:	  return -1;
        -:  964:	}
        -:  965:
    #####:  966:      gainCard(choice2, state, 0, currentPlayer);
        -:  967:
        -:  968:      //discard card from hand
    #####:  969:      discardCard(handPos, currentPlayer, state, 0);
        -:  970:
        -:  971:      //discard trashed card
    #####:  972:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  973:	{
    #####:  974:	  if (state->hand[currentPlayer][i] == j)
        -:  975:	    {
    #####:  976:	      discardCard(i, currentPlayer, state, 0);			
    #####:  977:	      break;
        -:  978:	    }
        -:  979:	}
        -:  980:
        -:  981:
    #####:  982:      return 0;
        -:  983:		
        -:  984:    case smithy:
    #####:  985:		return smithyfunc(state, handPos);
        -:  986:      //+3 Cards
        -:  987:	  
        -:  988:     // for (i = 0; i < 3; i++)
        -:  989:	//{
        -:  990:	 // drawCard(currentPlayer, state);
        -:  991:	//}
        -:  992:			
        -:  993:      //discard card from hand
        -:  994:	  
        -:  995:      //discardCard(handPos, currentPlayer, state, 0);
        -:  996:      //return 0;
        -:  997:		
        -:  998:    case village:
    #####:  999:		return villagefunc(state, handPos);
        -: 1000:
        -: 1001:		
        -: 1002:    case baron:
    #####: 1003:      state->numBuys++;//Increase buys by 1!
    #####: 1004:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####: 1005:	int p = 0;//Iterator for hand!
    #####: 1006:	int card_not_discarded = 1;//Flag for discard set!
    #####: 1007:	while(card_not_discarded){
    #####: 1008:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####: 1009:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####: 1010:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####: 1011:	    state->discardCount[currentPlayer]++;
    #####: 1012:	    for (;p < state->handCount[currentPlayer]; p++){
    #####: 1013:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1014:	    }
    #####: 1015:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####: 1016:	    state->handCount[currentPlayer]--;
    #####: 1017:	    card_not_discarded = 0;//Exit the loop
        -: 1018:	  }
    #####: 1019:	  else if (p > state->handCount[currentPlayer]){
    #####: 1020:	    if(DEBUG) {
        -: 1021:	      printf("No estate cards in your hand, invalid choice\n");
        -: 1022:	      printf("Must gain an estate if there are any\n");
        -: 1023:	    }
    #####: 1024:	    if (supplyCount(estate, state) > 0){
    #####: 1025:	      gainCard(estate, state, 0, currentPlayer);
    #####: 1026:	      state->supplyCount[estate]--;//Decrement estates
    #####: 1027:	      if (supplyCount(estate, state) == 0){
    #####: 1028:		isGameOver(state);
        -: 1029:	      }
        -: 1030:	    }
    #####: 1031:	    card_not_discarded = 0;//Exit the loop
        -: 1032:	  }
        -: 1033:			    
        -: 1034:	  else{
    #####: 1035:	    p++;//Next card
        -: 1036:	  }
        -: 1037:	}
        -: 1038:      }
        -: 1039:			    
        -: 1040:      else{
    #####: 1041:	if (supplyCount(estate, state) > 0){
    #####: 1042:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####: 1043:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1044:	  if (supplyCount(estate, state) == 0){
    #####: 1045:	    isGameOver(state);
        -: 1046:	  }
        -: 1047:	}
        -: 1048:      }
        -: 1049:	    
        -: 1050:      
    #####: 1051:      return 0;
        -: 1052:		
        -: 1053:    case great_hall:
        -: 1054:      //+1 Card
    #####: 1055:      drawCard(currentPlayer, state);
        -: 1056:			
        -: 1057:      //+1 Actions
    #####: 1058:      state->numActions++;
        -: 1059:			
        -: 1060:      //discard card from hand
    #####: 1061:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1062:      return 0;
        -: 1063:		
        -: 1064:    case minion:
        -: 1065:	
    #####: 1066:		return minionfunc(choice1,choice2, state,handPos);
        -: 1067:      //+1 action
        -: 1068:
        -: 1069:			
        -: 1070:      //discard card from hand
        -: 1071:      // discardCard(handPos, currentPlayer, state, 0);
        -: 1072:			
        -: 1073:      // if (choice1)		//+2 coins
        -: 1074:	// {
        -: 1075:	  // state->coins = state->coins + 2;
        -: 1076:	// }
        -: 1077:			
        -: 1078:      // else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1079:	// {
        -: 1080:	  //discard hand
        -: 1081:	  // while(numHandCards(state) > 0)
        -: 1082:	    // {
        -: 1083:	      // discardCard(handPos, currentPlayer, state, 0);
        -: 1084:	    // }
        -: 1085:				
        -: 1086:	  //draw 4
        -: 1087:	  // for (i = 0; i < 4; i++)
        -: 1088:	    // {
        -: 1089:	      // drawCard(currentPlayer, state);
        -: 1090:	    // }
        -: 1091:				
        -: 1092:	  //other players discard hand and redraw if hand size > 4
        -: 1093:	  // for (i = 0; i < state->numPlayers; i++)
        -: 1094:	    // {
        -: 1095:	      // if (i != currentPlayer)
        -: 1096:		// {
        -: 1097:		  // if ( state->handCount[i] > 4 )
        -: 1098:		    // {
        -: 1099:		      //discard hand
        -: 1100:		      // while( state->handCount[i] > 0 )
        -: 1101:			// {
        -: 1102:			  // discardCard(handPos, i, state, 0);
        -: 1103:			// }
        -: 1104:							
        -: 1105:		      //draw 4
        -: 1106:		      // for (j = 0; j < 4; j++)
        -: 1107:			// {
        -: 1108:			  // drawCard(i, state);
        -: 1109:			// }
        -: 1110:		    // }
        -: 1111:		// }
        -: 1112:	    // }
        -: 1113:				
        -: 1114:	// }
        -: 1115:      // return 0;
        -: 1116:		
        -: 1117:    // case steward:
        -: 1118:      if (choice1 == 1)
        -: 1119:	{
        -: 1120:	  //+2 cards
        -: 1121:	  drawCard(currentPlayer, state);
        -: 1122:	  drawCard(currentPlayer, state);
        -: 1123:	}
        -: 1124:      else if (choice1 == 2)
        -: 1125:	{
        -: 1126:	  //+2 coins
        -: 1127:	  state->coins = state->coins + 2;
        -: 1128:	}
        -: 1129:      else
        -: 1130:	{
        -: 1131:	  //trash 2 cards in hand
        -: 1132:	  discardCard(choice2, currentPlayer, state, 1);
        -: 1133:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1134:	}
        -: 1135:			
        -: 1136:      //discard card from hand
        -: 1137:      discardCard(handPos, currentPlayer, state, 0);
        -: 1138:      return 0;
        -: 1139:		
        -: 1140:    case tribute:
    #####: 1141:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1142:	if (state->deckCount[nextPlayer] > 0){
    #####: 1143:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1144:	  state->deckCount[nextPlayer]--;
        -: 1145:	}
    #####: 1146:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1147:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1148:	  state->discardCount[nextPlayer]--;
        -: 1149:	}
        -: 1150:	else{
        -: 1151:	  //No Card to Reveal
    #####: 1152:	  if (DEBUG){
        -: 1153:	    printf("No cards to reveal\n");
        -: 1154:	  }
        -: 1155:	}
        -: 1156:      }
        -: 1157:	    
        -: 1158:      else{
    #####: 1159:	if (state->deckCount[nextPlayer] == 0){
    #####: 1160:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1161:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1162:	    state->deckCount[nextPlayer]++;
    #####: 1163:	    state->discard[nextPlayer][i] = -1;
    #####: 1164:	    state->discardCount[nextPlayer]--;
        -: 1165:	  }
        -: 1166:			    
    #####: 1167:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1168:	} 
    #####: 1169:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1170:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1171:	state->deckCount[nextPlayer]--;
    #####: 1172:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1173:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1174:	state->deckCount[nextPlayer]--;
        -: 1175:      }    
        -: 1176:		       
    #####: 1177:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1178:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1179:	state->playedCardCount++;
    #####: 1180:	tributeRevealedCards[1] = -1;
        -: 1181:      }
        -: 1182:
    #####: 1183:      for (i = 0; i <= 2; i ++){
    #####: 1184:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1185:	  state->coins += 2;
        -: 1186:	}
        -: 1187:		    
    #####: 1188:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1189:	  drawCard(currentPlayer, state);
    #####: 1190:	  drawCard(currentPlayer, state);
        -: 1191:	}
        -: 1192:	else{//Action Card
    #####: 1193:	  state->numActions = state->numActions + 2;
        -: 1194:	}
        -: 1195:      }
        -: 1196:	    
    #####: 1197:      return 0;
        -: 1198:		
        -: 1199:    case ambassador:
    #####: 1200:      j = 0;		//used to check if player has enough cards to discard
        -: 1201:
    #####: 1202:      if (choice2 > 2 || choice2 < 0)
        -: 1203:	{
    #####: 1204:	  return -1;				
        -: 1205:	}
        -: 1206:
    #####: 1207:      if (choice1 == handPos)
        -: 1208:	{
    #####: 1209:	  return -1;
        -: 1210:	}
        -: 1211:
    #####: 1212:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1213:	{
    #####: 1214:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1215:	    {
    #####: 1216:	      j++;
        -: 1217:	    }
        -: 1218:	}
    #####: 1219:      if (j < choice2)
        -: 1220:	{
    #####: 1221:	  return -1;				
        -: 1222:	}
        -: 1223:
    #####: 1224:      if (DEBUG) 
        -: 1225:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1226:
        -: 1227:      //increase supply count for choosen card by amount being discarded
    #####: 1228:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1229:			
        -: 1230:      //each other player gains a copy of revealed card
    #####: 1231:      for (i = 0; i < state->numPlayers; i++)
        -: 1232:	{
    #####: 1233:	  if (i != currentPlayer)
        -: 1234:	    {
    #####: 1235:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1236:	    }
        -: 1237:	}
        -: 1238:
        -: 1239:      //discard played card from hand
    #####: 1240:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1241:
        -: 1242:      //trash copies of cards returned to supply
    #####: 1243:      for (j = 0; j < choice2; j++)
        -: 1244:	{
    #####: 1245:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1246:	    {
    #####: 1247:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1248:		{
    #####: 1249:		  discardCard(i, currentPlayer, state, 1);
    #####: 1250:		  break;
        -: 1251:		}
        -: 1252:	    }
        -: 1253:	}			
        -: 1254:
    #####: 1255:      return 0;
        -: 1256:		
        -: 1257:    case cutpurse:
        -: 1258:
    #####: 1259:      updateCoins(currentPlayer, state, 2);
    #####: 1260:      for (i = 0; i < state->numPlayers; i++)
        -: 1261:	{
    #####: 1262:	  if (i != currentPlayer)
        -: 1263:	    {
    #####: 1264:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1265:		{
    #####: 1266:		  if (state->hand[i][j] == copper)
        -: 1267:		    {
    #####: 1268:		      discardCard(j, i, state, 0);
    #####: 1269:		      break;
        -: 1270:		    }
    #####: 1271:		  if (j == state->handCount[i])
        -: 1272:		    {
    #####: 1273:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1274:			{
    #####: 1275:			  if (DEBUG)
        -: 1276:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1277:			}	
    #####: 1278:		      break;
        -: 1279:		    }		
        -: 1280:		}
        -: 1281:					
        -: 1282:	    }
        -: 1283:				
        -: 1284:	}				
        -: 1285:
        -: 1286:      //discard played card from hand
    #####: 1287:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1288:
    #####: 1289:      return 0;
        -: 1290:
        -: 1291:		
        -: 1292:    case embargo: 
        -: 1293:      //+2 Coins
        -: 1294:	  //printf("state coin is % d \n", state->coins);
    #####: 1295:      state->coins = state->coins + 2;
        -: 1296:			
        -: 1297:      //see if selected pile is in play
    #####: 1298:      if ( state->supplyCount[choice1] == -1 )
        -: 1299:	{
    #####: 1300:	  return -1;
        -: 1301:	}
        -: 1302:			
        -: 1303:      //add embargo token to selected supply pile
    #####: 1304:      state->embargoTokens[choice1]++;
        -: 1305:			
        -: 1306:      //trash card
    #####: 1307:      discardCard(handPos, currentPlayer, state, 1);
        -: 1308:	  //printf("state coin after is % d \n", state->coins);	  
    #####: 1309:      return 0;
        -: 1310:		
        -: 1311:    case outpost:
        -: 1312:      //set outpost flag
    #####: 1313:      state->outpostPlayed++;
        -: 1314:			
        -: 1315:      //discard card
    #####: 1316:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1317:      return 0;
        -: 1318:		
        -: 1319:    case salvager:
        -: 1320:      //+1 buy
    #####: 1321:      state->numBuys++;
        -: 1322:			
    #####: 1323:      if (choice1)
        -: 1324:	{
        -: 1325:	  //gain coins equal to trashed card
    #####: 1326:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1327:	  //trash card
    #####: 1328:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1329:	}
        -: 1330:			
        -: 1331:      //discard card
    #####: 1332:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1333:      return 0;
        -: 1334:		
        -: 1335:    case sea_hag:
    #####: 1336:      for (i = 0; i < state->numPlayers; i++){
    #####: 1337:	if (i != currentPlayer){
    #####: 1338:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1339:	  state->discardCount[i]++;
    #####: 1340:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1341:	}
        -: 1342:      }
    #####: 1343:      return 0;
        -: 1344:		
        -: 1345:    case treasure_map:
        -: 1346:      //search hand for another treasure_map
    #####: 1347:      index = -1;
    #####: 1348:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1349:	{
    #####: 1350:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1351:	    {
    #####: 1352:	      index = i;
    #####: 1353:	      break;
        -: 1354:	    }
        -: 1355:	}
    #####: 1356:      if (index > -1)
        -: 1357:	{
        -: 1358:	  //trash both treasure cards
    #####: 1359:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1360:	  discardCard(index, currentPlayer, state, 1);
        -: 1361:
        -: 1362:	  //gain 4 Gold cards
    #####: 1363:	  for (i = 0; i < 4; i++)
        -: 1364:	    {
    #####: 1365:	      gainCard(gold, state, 1, currentPlayer);
        -: 1366:	    }
        -: 1367:				
        -: 1368:	  //return success
    #####: 1369:	  return 1;
        -: 1370:	}
        -: 1371:			
        -: 1372:      //no second treasure_map found in hand
    #####: 1373:      return -1;
        -: 1374:    }
        -: 1375:	
    #####: 1376:  return -1;
        -: 1377:}
        -: 1378:
    #####: 1379:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1380:{
        -: 1381:	
        -: 1382:  //if card is not trashed, added to Played pile 
    #####: 1383:  if (trashFlag < 1)
        -: 1384:    {
        -: 1385:      //add card to played pile
    #####: 1386:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1387:      state->playedCardCount++;
        -: 1388:    }
        -: 1389:	
        -: 1390:  //set played card to -1
    #####: 1391:  state->hand[currentPlayer][handPos] = -1;
        -: 1392:	
        -: 1393:  //remove card from player's hand
    #####: 1394:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1395:    {
        -: 1396:      //reduce number of cards in hand
    #####: 1397:      state->handCount[currentPlayer]--;
        -: 1398:    }
    #####: 1399:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1400:    {
        -: 1401:      //reduce number of cards in hand
    #####: 1402:      state->handCount[currentPlayer]--;
        -: 1403:    }
        -: 1404:  else 	
        -: 1405:    {
        -: 1406:      //replace discarded card with last card in hand
    #####: 1407:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1408:      //set last card to -1
    #####: 1409:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1410:      //reduce number of cards in hand
    #####: 1411:      state->handCount[currentPlayer]--;
        -: 1412:    }
        -: 1413:	
    #####: 1414:  return 0;
        -: 1415:}
        -: 1416:
    #####: 1417:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1418:{
        -: 1419:  //Note: supplyPos is enum of choosen card
        -: 1420:	
        -: 1421:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1422:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1423:    {
    #####: 1424:      return -1;
        -: 1425:    }
        -: 1426:	
        -: 1427:  //added card for [whoseTurn] current player:
        -: 1428:  // toFlag = 0 : add to discard
        -: 1429:  // toFlag = 1 : add to deck
        -: 1430:  // toFlag = 2 : add to hand
        -: 1431:
    #####: 1432:  if (toFlag == 1)
        -: 1433:    {
    #####: 1434:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1435:      state->deckCount[player]++;
        -: 1436:    }
    #####: 1437:  else if (toFlag == 2)
        -: 1438:    {
    #####: 1439:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1440:      state->handCount[player]++;
        -: 1441:    }
        -: 1442:  else
        -: 1443:    {
    #####: 1444:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1445:      state->discardCount[player]++;
        -: 1446:    }
        -: 1447:	
        -: 1448:  //decrease number in supply pile
    #####: 1449:  state->supplyCount[supplyPos]--;
        -: 1450:	 
    #####: 1451:  return 0;
        -: 1452:}
        -: 1453:
      516: 1454:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1455:{
        -: 1456:  int i;
        -: 1457:	
        -: 1458:  //reset coin count
      516: 1459:  state->coins = 0;
        -: 1460:
        -: 1461:  //add coins for each Treasure card in player's hand
     3096: 1462:  for (i = 0; i < state->handCount[player]; i++)
        -: 1463:    {
     2580: 1464:      if (state->hand[player][i] == copper)
        -: 1465:	{
     1851: 1466:	  state->coins += 1;
        -: 1467:	}
      729: 1468:      else if (state->hand[player][i] == silver)
        -: 1469:	{
    #####: 1470:	  state->coins += 2;
        -: 1471:	}
      729: 1472:      else if (state->hand[player][i] == gold)
        -: 1473:	{
    #####: 1474:	  state->coins += 3;
        -: 1475:	}	
        -: 1476:    }	
        -: 1477:
        -: 1478:  //add bonus
        -: 1479:	//printf ("bonus is %d \n", bonus);
        -: 1480:	//printf("state coin before adding bonus % d \n", state->coins);
      516: 1481:	state->coins += bonus;
        -: 1482:	//printf("state coin after adding bonus % d \n", state->coins);
        -: 1483:
        -: 1484:  // debugg statement
        -: 1485:  //printf("total coins : %d \n", state->coins);
        -: 1486:
      516: 1487:  return 0;
        -: 1488:}
        -: 1489:
        -: 1490:
        -: 1491://end of dominion.c
        -: 1492:
